{
  "template": {
    "taskId": "bb6d2123-42f3-493d-abb8-688e557ca7cf",
    "name": "Common Page Events",
    "repo": "Modular-Curriculum",
    "path": "content/dom/topics/event-handling/readings/reading-1-common-page-events-js.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "common-page-events"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "# Event Handling: Common Page Events\n\nEvent handling is the core of front-end development. When a user interacts with\nHTML elements on a website, those interactions are known as _**events**_.\nDevelopers use Javascript to respond to those events. In this reading, we’ll go\nover three common events and do exercises to add functionality based on those\nevents:\n\n- A button click\n- A checkbox being checked\n- A user typing a value into an input\n\n## Handling a button click event\n\nLet’s start with a common event that occurs on many websites: a button click.\nUsually some functionality occurs when a button is clicked -- such as displaying\nnew page elements, changing current elements, or submitting a form.\n\nWe’ll go through how to set up a [click event][1] listener and update the click\ncount after each click. Let’s say we have a button element in an HTML file, like\nbelow:\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"script.js\">\n  </head>\n  <body>\n    <button id=\"increment-count\">I have been clicked <span id=\"clicked-count\">0</span> times</button>\n  </body>\n</html>\n```\n\nWe’ll write Javascript to increase the value of the content of\n`span#clicked-count` by one each time `button#increment-count` is clicked.\nRemember to use the `DOMContentLoaded` event listener in an external script to\nensure the button has loaded on the page before the script runs.\n\n**Javascript**\n\nIf you open up the HTML file in a browser, you should see the button. If you\nclick the button rapidly and repeatedly, the value of `span#clicked-count`\nshould increment by one after each click.\n\n```js\n// script.js\n\nwindow.addEventListener(\"DOMContentLoaded\", event => {\n  const button = document.getElementById(\"increment-count\");\n  const count = document.getElementById(\"clicked-count\");\n  let clicks = 0;\n  button.addEventListener(\"click\", event => {\n    clicks += 1;\n    count.innerHTML = clicks;\n  });\n});\n```\n\n### Using addEventListener() vs. onclick\n\nAdding an event listener to the button element, as we did above, is the\npreferred method of handling events in scripts. However, there is another method\nwe could use here: [GlobalEventHandlers.onclick][3]. Check out\n[codingrepo.com][4] for a breakdown of the differences between using\n`addEventListener()` and `onclick`. One distinction is that `onclick` overrides\nexisting event listeners, while `addEventListener()` does not, making it easy to\nadd new event listeners.\n\nThe syntax for `onclick` is: `target.onclick = functionRef;` If we wanted to\nrewrite the button click event example using `onclick`, we would use the\nfollowing:\n\n```js\nlet clicks = 0;\nbutton.onclick = event => {\n  clicks += 1;\n  count.innerHTML = clicks;\n};\n```\n\nWe’ll stick to using `addEventListener()` in our code, but it’s important for\nfront-end developers to understand the differences between the methods above and\nuse cases for each one.\n\n## Handling a checkbox check event\n\nAnother common event that occurs on many websites is when a user checks a\ncheckbox. Checkboxes are typically recorded values that get submitted when a\nuser submits a form, but checking the box sometimes also triggers another\nfunction.\n\nLet’s practice displaying an element when the box is checked and hiding it when\nthe box is unchecked. We’ll pretend we’re on a pizza delivery website, and we’re\nfilling out a form for pizza toppings. There is a checkbox on the page for extra\ncheese, and when a user checks that box we want to show a `div` with pricing\ninfo. Let’s set up our HTML file with a `checkbox` and `div` to show/hide, as\nwell as a link to our Javascript file:\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"script.js\">\n  </head>\n  <body>\n    <h1>Pizza Toppings</h1>\n    <input type=\"checkbox\" id=\"on-off\">\n    <label for=\"on-off\">Extra Cheese</label>\n    <div id=\"now-you-see-me\" style=\"display:none\">Add $1.00</div>\n  </body>\n</html>\n```\n\nNote that we’ve added `style=\"display:none\"` to the `div` so that, when the page\nfirst loads and the box is unchecked, the `div` won’t show.\n\nIn our `script.js` file, we’ll set up an event listener for `DOMContentLoaded`\nagain to make sure the `checkbox` and `div` have loaded. Then, we’ll write\nJavascript to show `div#now-you-see-me` when the box is checked and hide it when\nthe box is unchecked.\n\n**Javascript**\n\n```js\n// script.js\n\nwindow.addEventListener(\"DOMContentLoaded\", event => {\n  // store the elements we need in variables\n  const checkbox = document.getElementById(\"on-off\");\n  const divShowHide = document.getElementById(\"now-you-see-me\");\n  // add an event listener for the checkbox click\n  checkbox.addEventListener(\"click\", event => {\n    // use the 'checked' attribute of checkbox inputs\n    // returns true if checked, false if unchecked\n    if (checkbox.checked) {\n      // if the box is checked, show the div\n      divShowHide.style.display = \"block\";\n      // else hide the div\n    } else {\n      divShowHide.style.display = \"none\";\n    }\n  });\n});\n```\n\nOpen up the HTML document in a browser and make sure that you see the `checkbox`\nwhen the page first loads and not the `div`. The `div` should show when you\ncheck the box, and appear hidden when you uncheck the box.\n\nThe code above works. However, what would happen if we had a whole page of\ncheckboxes with extra options inside each one that would show or hide based on\nwhether the boxes are checked? We would have to call\n`Element.style.display = \"block\"` and `Element.style.display = \"none\"` on each\nassociated `div`.\n\nInstead, we could add a `show` or `hide` class to the `div` based on the\ncheckbox and keep our `display:block` and `display:none` in CSS. That way, we\ncould reuse the classes on different elements, as well as see class names change\nin the HTML. Here’s how the code we wrote above would look if we used CSS\nclasses:\n\n**Javascript**\n\n```js\n// script.js\n// we need to wait for the stylesheet to load\nwindow.onload = () => {\n  // store the elements we need in variables\n  const checkbox = document.getElementById(\"on-off\");\n  const divShowHide = document.getElementById(\"now-you-see-me\");\n  // add an event listener for the checkbox click\n  checkbox.addEventListener(\"click\", event => {\n    // use the 'checked' attribute of checkbox inputs\n    // returns true if checked, false if unchecked\n    if (checkbox.checked) {\n      // if the box is checked, show the div\n      divShowHide.classList.remove(\"hide\");\n      divShowHide.classList.add(\"show\");\n      // else hide the div\n    } else {\n      divShowHide.classList.remove(\"show\");\n      divShowHide.classList.add(\"hide\");\n    }\n  });\n};\n```\n\n**CSS**\n\n```css\n.show {\n  display: block;\n}\n.hide {\n  display: none;\n}\n```\n\n**HTML (Remove the style attribute, and add the \"hide\" class)**\n\n```html\n<div id=\"now-you-see-me\" class=\"hide\">Add $1.00</div>\n```\n\n## Handling a user input value\n\nYou’ve learned a lot about event handling so far! Let’s do one more exercise to\npractice event handling using an input. In this exercise, we’ll write JavaScript\nthat will change the background color of the page to cyan five seconds after a\npage loads unless the field `input#stopper` contains only the text \"STOP\".\n\nLet’s set up an HTML file with the input and a placeholder directing the user to\ntype \"STOP\": **HTML**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"script.js\">\n  </head>\n  <body>\n    <input id=\"stopper\" type=\"text\" placeholder=\"Quick! Type STOP\">\n  </body>\n</html>\n```\n\nNow let’s set up our Javascript:\n\n**Javascript**\n\n```js\n// script.js\n// run when the DOM is ready\nwindow.addEventListener(\"DOMContentLoaded\", event => {\n  const stopCyanMadness = () => {\n    // get the value of the input field\n    const inputValue = document.getElementById(\"stopper\").value;\n    // if value is anything other than 'STOP', change background color\n    if (inputValue !== \"STOP\") {\n      document.body.style.backgroundColor = \"cyan\";\n    }\n  };\n  setTimeout(stopCyanMadness, 5000);\n});\n```\n\nThe code at the bottom of our function might look familiar. We used\n`setInterval` along with the Javascript Date object when we set up our current\ntime clock. In this case we're using `setTimeout`, which runs `stopCyanMadness`\nafter 5000 milliseconds, or 5 seconds after the page loads.\n\n## What we learned:\n\n- How to add an event listener on a button click\n- How to add an event listener to a checkbox\n- Styling elements with Javascript vs. with CSS classes\n- How to check the value of an input\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail\n[3]: https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick\n[4]: https://www.simonewebdesign.it/onclick-vs-addeventlistener/\n"
  },
  "success": true
}