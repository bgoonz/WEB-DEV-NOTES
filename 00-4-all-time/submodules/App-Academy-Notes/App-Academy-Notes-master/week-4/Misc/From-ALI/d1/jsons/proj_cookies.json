{
  "template": {
    "taskId": "be5ebf98-9339-419c-a935-a017f2c74cf9",
    "name": "Cookies Project",
    "repo": "Modular-Curriculum",
    "path": "content/dom/topics/browser-basics/projects/cookies/README.md",
    "type": "Project",
    "timeEstimate": 10800,
    "urls": [
      "cookies-project"
    ],
    "topic": "Monday - Browser Basics",
    "subtopic": "Practices",
    "download": "https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-DOM-API/browser-basics/projects/cookies-project.zip",
    "solution": "https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-DOM-API/browser-basics/projects/cookies-project-solution.zip",
    "body": "# Project: Fresh Cookies In The Window: Come And Get ‚ÄòEm!\n\nNow that you know all about the browser, the BOM, and the window, let‚Äôs get\ncooking! In this project, you will:\n\n- Set up a server and run files locally\n- Practice running a script when the page has loaded\n- Set, Get, and Delete cookies using JavaScript\n- Open and resize a window using JavaScript\n\n## Introduction\n\nPicture yourself baking some fresh cookies (chocolate chip? snickerdoodle?\npeanut butter?) on a crisp autumn day.\n\nThe timer‚Äôs gone off, and as you take the piping hot tray out of the oven, you\nsalivate in anticipation of a tasty treat. But, the cookies are way too hot and\nneed to cool down. You crack open the nearest window just enough, and set the\ntray down next to it, letting a cool breeze waft over the cookies. You‚Äôre\nlooking forward to the first bite!\n\nLet the imagery above be your inspiration while completing this coding project.\nWe can think of the browser‚Äôs `window` object as a physical window, and browser\ncookies as actual doughy desserts, if for no other reason that it‚Äôs a fun\nmnemonic device.\n\n## Project overview\n\nLet‚Äôs practice running a script when the page has loaded. We‚Äôll also manipulate\nthe `window` object by changing its height. Finally, we‚Äôll bake some byte-sized\ncookies and set them in the window.\n\n## Phase 1: Using a local Node/Express server (_Whoa!_)\n\nExpress is a Node framework that you'll be using to set up a local server on\nyour machine. This will come in handy when we‚Äôre practicing how to set a cookie.\n\nWe've set up an Express app for you to use. Open the `cookies-project` folder\ninside of this Module. Then go through the following:\n\n1. Make sure Node is installed on your machine.\n2. Run `npm install`.\n3. Run `npm start`, you should see \"Example app listening on port 3000!\" in your\n   terminal.\n4. Open up `localhost:3000` in your browser and make sure you see 'Cookies!!!'\n\n_You'll be using the **public/index.html** file to write your HTML and\n**public/js/cookies.js** file to write your JavaScript._\n\n## Phase 2: Add a script on DOM/page load (_Practice makes perfect._)\n\nInside of your `cookies.js` file:\n\n- Practice running your script after the page has loaded. You can use\n  `DOMContentLoaded` or `window.onload`. If you‚Äôre linking to an external JS\n  file, practice using the `async` or `defer` methods.\n\n## Phase 3: Set a cookie in the window (_Freshly baked!_)\n\nInside of your `cookies.js` file, practice setting a cookie. Here are a couple\nof examples:\n\n- `document.cookie = \"monster_name=cookie\";`\n- `document.cookie = \"favorite_cookie=snickerdoodle\";`\n\nNow looking at your Developer Tools, did the cookies you set appear in the\ncorrect place? Try defining one more cookie in your `cookies.js` and refresh\nyour page. Do you see it in the Developer Tools? Now delete your most recent\ncookie and refresh your page. If you delete a cookie, what happens in the\nbrowser tab when you refresh?\n\nLet's show our new cookies to our user! Try using the\n[`window.alert()`][window-alert] method to let our user know the information of\nall the cookies stored in the browser.\n\n[window-alert]: https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\n\n## Phase 4: No such thing as just one more cookie\n\nSetting cookies one at a time by hand is probably getting old by now. Let's\nwrite a new function called `setCookie(name, value)`. The `setCookie` function\nwill accept two arguments, a name and a value, and will create a new cookie\nusing those arguments.\n\nNice! Try testing out your new function by creating a few cookies. Now that we\nhave a way to set cookies it'd sure be nice to have a way to return all the\ncookies. So... let's hop to it!\n\n## Phase 5: Gimme all the cookies\n\nWrite a function named `getCookies()` that will return an array of the key value\npairs of each set cookie. This is easy to do when you remember that\n`document.cookie` returns a string!\n\nLook below for an example of how `getCookies` is used:\n\n```js\nsetCookie(\"dog\", \"Fido\");\nsetCookie(\"cat\", \"Jet\");\n\nconsole.log(getCookies()); // prints [\"dog=Fido\", \"cat=Jet\"]\n```\n\nLet's take this one step further - what if we wanted to get the value for one\nparticular cookie?\n\nWrite a new function `getCookieValue(name)` that intakes that name of a cookie\nas an argument. If the given cookie name exists `getCookieValue` will return the\nvalue of that cookie. If a cookie with the given name doesn't exist the\n`getCookieValue` function should return `null`.\n\nHere is an example of `getCookieValue` in action:\n\n```js\nsetCookie(\"cat\", \"Jet\");\n\nconsole.log(getCookies()); // prints [\"cat=Jet\"]\nconsole.log(getCookieValue(\"cat\")); // \"Jet\"\nconsole.log(getCookieValue(\"rabbit\")); // null\n```\n\n## Phase 6: Removing a cookie\n\nNow that we have a couple of functions in place to set and get cookies lets\nwrite a function called `deleteCookie(name)`. The `deleteCookie` function will\naccept the name of a cookie to be deleted and will delete that cookie, if it\nexists. If `deleteCookie` is given the name of a cookie that doesn't exist it\nshould print a message to the user saying the cookie wasn't found.\n\nHere is an example of `deleteCookie` in action:\n\n```js\nsetCookie(\"cat\", \"Jet\");\nsetCookie(\"dog\", \"Fido\");\n\nconsole.log(getCookies()); // prints [\"cat=Jet\", \"dog=Fido\"]\ndeleteCookie(\"cat\");\nconsole.log(getCookies()); // prints [\"dog=Fido\"]\ndeleteCookie(\"rabbit\"); // prints \"cookie not found!\"\n```\n\nWe now have set up some nice utility function to get, set, and delete cookies!\nPretty yummy if you ask me! üç™\n\n## Bonuses: More fun with cookies!\n\nCheck out the MDN documentation on [Document.cookie][3] to help you complete the\ntasks below.\n\n## Bonus A: Open a new window and resize it based on cookie value (_Smells great!_)\n\nLet's trying doing something fun will all our new cookie functions. Let's write\nsome code to do the following:\n\n1. generate a random number\n2. store that number in a cookie\n3. open a new window and set the new window's height and width to the cookie\n   value we stored in step 2.\n\n- _Hint: Recall that we can use [Math.random()][1] to generate a random number._\n- _Hint: Use `window.open()` AND `window.resizeTo()` OR `window.resizeBy()`_\n\nWhen you run the script, you should see a new window open with the width and\nheight set to the value that was stored in the cookie. Baked and cooled!\n\n### Bonus B: Create new cookies at the click of a button\n\nAre you a master baker? Create the necessary html elements and JavaScript so\nthat a user can input a cookie name and value and click a button to create a\ncookie with the name and value they specified.\n\nThe sequence of events will be:\n\n1. A user inputs the name and value they want for their cookie\n2. The user clicks the button to create their new cookie\n3. The new cookie is created\n4. To ensure the best user experience, empty the two inputs for the cookie name\n   and value (so a user can easily create another cookie)\n5. Log all the cookies to the console so the user can see their new cookie!\n\nCongratulations! Hang up your your apron for now knowing you are a cookie\nmaster.\n\n[1]:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n[3]: https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n"
  },
  "success": true
}