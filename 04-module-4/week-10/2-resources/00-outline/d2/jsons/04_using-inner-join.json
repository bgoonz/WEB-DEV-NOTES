{
  "template": {
    "taskId": "48908d0e-ecae-4604-be5e-78c77d16f67c",
    "name": "Using INNER JOIN",
    "repo": "Modular-Curriculum",
    "path": "content/relational-databases/topics/sql/readings/reading-09-foreign-keys-join-sql.md",
    "type": "Reading",
    "timeEstimate": 1800,
    "urls": [
      "using-inner-join"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# Foreign Keys And The JOIN Operation\n\nIn relational databases, _relationships_ are key. We can create relationships,\nor _associations_, among tables so that they can access and share data. In a\nSQL database, we create table associations through _foreign keys_ and _primary\nkeys_.\n\nYou've learned about primary and foreign keys. Now, it's time to put them to\nuse.\n\n## Setting up the database\n\nCreate a new database called \"learn_joins\". Connect to that database. Run the\nfollowing SQL statements to create tables and the data in them.\n\n```sql\nCREATE TABLE breeds (\n  id SERIAL,\n  name VARCHAR(50) NOT NULL,\n  PRIMARY KEY (id)\n);\n```\n\n```sql\nINSERT INTO breeds (name)\nVALUES\n('Australian Shepherd'),\n('Basset Hound'),\n('Beagle'),\n('Corgi'),\n('German Shepherd'),\n('Korean Jindo'),\n('Labradoodle'),\n('Miniature Schnauzer'),\n('Yorkshire Terrier');\n```\n\n```sql\nCREATE TABLE puppies (\n  id SERIAL,\n  name VARCHAR(50) NOT NULL,\n  age_yrs NUMERIC(3,1) NOT NULL,\n  breed_id INTEGER NOT NULL,\n  weight_lbs INTEGER NOT NULL,\n  microchipped BOOLEAN NOT NULL DEFAULT FALSE,\n  PRIMARY KEY(id),\n  FOREIGN KEY (breed_id) REFERENCES breeds(id)\n);\n```\n\n```sql\nINSERT INTO puppies (name, age_yrs, breed_id, weight_lbs, microchipped)\nVALUES\n('Cooper', 1, 8, 18, true),\n('Indie', 0.5, 9, 13, true),\n('Kota', 0.7, 1, 26, false),\n('Zoe', 0.8, 6, 32, true),\n('Charley', 1.5, 2, 25, false),\n('Ladybird', 0.6, 7, 20, true),\n('Callie', 0.9, 4, 16, false),\n('Jaxson', 0.4, 3, 19, true),\n('Leinni', 1, 8, 25, true),\n('Max', 1.6, 5, 65, false);\n```\n\n## Using JOIN to retrieve rows from multiple tables\n\nNow that we’ve set up an association between the “puppies” table and the\n“friends” table, we can access data from both tables. We can do so by using a\n[JOIN operation][3] in our SELECT query. Type the following into psql:\n\n```sql\nSELECT * FROM puppies\nINNER JOIN breeds ON (puppies.breed_id = breeds.id);\n```\n\nThe `JOIN` operation above is joining the \"puppies\" table with the \"breeds\"\ntable together into a single table using the foreign key/primary key shared\nbetween the two tables: `breed_id`.\n\nYou should get all rows back containing all information for the puppies and\nbreeds with matching `breed_id` values:\n\n```sql\npostgres=# SELECT * FROM puppies\npostgres-# INNER JOIN breeds ON (puppies.breed_id = breeds.id);\n id |   name   | age_yrs | breed_id | weight_lbs | microchipped | id |        name\n----+----------+---------+----------+------------+--------------+----+---------------------\n  1 | Cooper   |     1.0 |        8 |         18 | t            |  8 | Miniature Schnauzer\n  2 | Indie    |     0.5 |        9 |         13 | t            |  9 | Yorkshire Terrier\n  3 | Kota     |     0.7 |        1 |         26 | f            |  1 | Australian Shepherd\n  4 | Zoe      |     0.8 |        6 |         32 | t            |  6 | Korean Jindo\n  5 | Charley  |     1.5 |        2 |         25 | f            |  2 | Basset Hound\n  6 | Ladybird |     0.6 |        7 |         20 | t            |  7 | Labradoodle\n  7 | Callie   |     0.9 |        4 |         16 | f            |  4 | Corgi\n  8 | Jaxson   |     0.4 |        3 |         19 | t            |  3 | Beagle\n  9 | Leinni   |     1.0 |        8 |         25 | t            |  8 | Miniature Schnauzer\n 10 | Max      |     1.6 |        5 |         65 | f            |  5 | German Shepherd\n(10 rows)\n```\n\nWe could make our query more specific by selecting specific columns, adding a\n`WHERE` clause, or doing any number of operations that we could do in a normal\n`SELECT` query. Aside from an `INNER JOIN`, we could also do different types of\n`JOIN` operations. (Refer to this overview on [PostgreSQL JOINS][4] for more\ninformation.)\n\n## What we learned:\n\n* What a foreign key is/does\n* How to create a foreign key\n* How to alter/update an existing table\n* How to use the JOIN operation to get rows from two tables\n\n## Helpful links:\n\n* [PostgreSQL Docs: Constraints][1]\n* [PostgreSQL Docs: Data Types > Numeric Types][2]\n* [PostgreSQL Docs: Joins Between Tables][3]\n* [PostgreSQL Tutorial: PostgreSQL Joins][4]\n\n[1]: https://www.postgresql.org/docs/9.2/ddl-constraints.html\n[2]: https://www.postgresql.org/docs/10/datatype-numeric.html\n[3]: https://www.postgresql.org/docs/8.3/tutorial-join.html\n[4]: http://www.postgresqltutorial.com/postgresql-joins/\n"
  },
  "success": true
}