{
  "template": {
    "taskId": "578972f5-a980-4624-bc9a-76df2ec14de9",
    "name": "Running JS Scripts in the Browser",
    "repo": "Modular-Curriculum",
    "path": "content/dom/topics/browser-basics/readings/reading-browser-running-scripts-js.md",
    "type": "Reading",
    "timeEstimate": 720,
    "urls": [
      "running-js-scripts-in-the-browser"
    ],
    "topic": "Homework for Next Monday",
    "subtopic": "Homework",
    "body": "# Running Scripts In The Browser\n\nTiming is everything, in life as well as in code that runs in a browser.\nExecuting a script at the right time is an important part of developing\nfront-end code. A script that runs too early or too late can cause bugs and\ndramatically affect user experience. After reading this section, you should be\nable to utilize the proper methods for ensuring your scripts run at the right\ntime.\n\nIn previous sections, we reviewed how the DOM and BOM works and used event\nlisteners to trigger script execution. In this lesson, we’ll dig deeper into the\n`window` object and learn multiple ways to ensure a script runs after the\nnecessary objects are loaded.\n\n## Using the Window API\n\nThe `window` object, the core of the Browser Object Model (BOM), has a number of\nproperties and methods that we can use to reference the window object. Refer to\nthe MDN documentation on the [Window API][1] for a detailed list of methods and\nproperties. We'll explore some of these methods now to give you a better grasp\non what the `window` object can do for you.\n\nLet’s use a Window API method called `resizeTo()` to change the width and height\nof a user's window in a script.\n\n```js\n// windowTest.js\n\n// Open a new window\nnewWindow = window.open(\"\", \"\", \"width=100, height=100\");\n\n// Resize the new window\nnewWindow.resizeTo(500, 500);\n```\n\nYou can execute the code above in your web browser in Google Chrome by right\nclicking the page, selecting inspect, and selecting the console tab. Paste the\ncode above into the console. When you do this, make sure you are not in\nfull-screen mode for Chrome, otherwise you won't be able to resize the new\nwindow!\n\n_Note: You must open a new window using `window.open` before it can be resized.\nThis method won’t work in an already open window or in a new tab._\n\nCheck out the documentation on [Window.resizeTo()][2] and [Window.resizeBy()][3]\nfor more information.\n\nGo to [wikipedia][wikipedia] and try setting the window scroll position by\npasting `window.scroll(0,300)` in the developer console (right click, inspect,\nconsole like usual). Play around with different scroll values. Pretty neat, huh?\n\n## Context, scope, and anonymous functions\n\nTwo important terms to understand when you’re developing in Javascript are\n**context** and **scope**. Ryan Morr has a great write-up about the differences\nbetween the two here: [“Understanding Scope and Context in Javascript”][4].\n\nThe important things to note about **context** are:\n\n1. Every function has a context (as well as a scope).\n2. Context refers to the object that _owns_ the function (i.e. the value of\n   _this_ inside a given function).\n3. Context is most often determined by how a function is invoked.\n\nTake, for example, the following code:\n\n```js\nconst foo = {\n  bar: function() {\n    return this;\n  }\n};\nconsole.log(foo.bar() === foo);\n// returns true\n```\n\nThe anonymous function above is a method of the `foo` object, which means that\n`this` returns the object itself — the context, in this case.\n\nWhat about functions that are unbound to an object, or not scoped inside of\nanother function? Try running this anonymous function, and see what happens.\n\n```js\n(function() {\n  console.log(this);\n})();\n```\n\nWhen you open your console in the browser and run this code, you should see the\n`window` object printed. When a function is called in the global scope, `this`\ndefaults to the global context, or in the case of running code in the browser,\nthe `window` object.\n\nRefer to [“Understanding Scope and Context in Javascript”][4] for more about the\nscope chain, closures, and using `.call()` and `.apply()` on functions.\n\n## Running a script on DOMContentLoaded\n\nNow you will learn how to run a script on `DOMContentLoaded`, when the\ndocument has been loaded without waiting for stylesheets, images and subframes\nto load.\n\nLet’s practice. Set up an HTML file, import an external JS file,\nand run a script on `DOMContentLoaded`.\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"text/javascript\" src=\"dom-ready-script.js\"></script>\n  </head>\n  <body></body>\n  <html></html>\n</html>\n```\n\n**JS**\n\n```js\nwindow.addEventListener(\"DOMContentLoaded\", event => {\n  console.log(\"This script loaded when the DOM was ready.\");\n});\n```\n\n## Running a script on page load\n\n`DOMContentLoaded` ensures that a script will run when the document has been\nloaded without waiting for stylesheets, images and subframes to load. However,\nif we wanted to wait for **everything** in the document to load before running\nthe script, we could instead use the `window` object method `window.onload`.\n\nLet’s practice it here. Set up an HTML file, import an external JS file, and run\na script on `window.onload`.\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"text/javascript\" src=\"window-load-script.js\"></script>\n  </head>\n  <body></body>\n  <html></html>\n</html>\n```\n\n**JS**\n\n```js\nwindow.onload = () => {\n  console.log(\n    \"This script loaded when all the resources and the DOM were ready.\"\n  );\n};\n```\n\n## Ways to prevent a script from running until page loads\n\nThere are actually multiple ways to prevent a script from running until the page\nhas loaded. We’ll review three of them here:\n\n1. Use the `DOMContentLoaded` event in an external JS file\n2. Put a script tag importing your external code at the bottom of your HTML file\n3. Add an attribute to the script tag, like `async` or `defer`\n\nWe’ve reviewed the first method above. Let’s now review numbers **2** and **3**.\nIf you want to make sure that all your HTML has loaded before a script runs, an\neasy option is to include your script immediately after the HTML you need. This\nworks because HTML builds the DOM tree in the order of how your HTML file is\nstructured. Whatever is on top will be loaded first, such as script tags in the\n`<head>`. It makes sense, then, to keep your script at the bottom of your HTML,\nright before the closing `</body>` tag, like below.\n\n```html\n<html>\n  <head></head>\n  <body>\n    …\n    <script src=\"script.js\"></script>\n  </body>\n</html>\n```\n\nIf you want to include your script in the `<head>` tags, rather than the\n`<body>` tags, there is another option: We could use the `async` or `defer`\nmethods in our `<script>` tag. [Flavio Copes has a great write-up][5] on using\n`async` or `defer` with graphics showing exactly when the browser parses HTML,\nfetches the script, and executes the script.\n\nWith `async`, a script is fetched asynchronously. After the script is fetched,\nHTML parsing is paused to execute the script, and then it’s resumed. With\n`defer`, a script is fetched asynchronously and is executed only after HTML\nparsing is finished.\n\nYou can use the `async` and `defer` methods independently or simultaneously.\nNewer browsers recognize `async`, while older ones recognize `defer`. If you use\n`async defer` simultaneously, `async` takes precedence, while older browsers\nthat don’t recognize it will default to `defer`. Check `caniuse.com` to see\nwhich browsers are compatible with [async][6] and [defer][7].\n\n```js\n  <script async src=\"scriptA.js\"></script>\n\n  <script defer src=\"scriptB.js\"></script>\n\n  <script async defer src=\"scriptC.js\"></script>\n```\n\n## What we learned:\n\n- How to use Window API methods\n- The context and scope of a function\n- Review of `DOMContentLoaded` and `window.onload`\n- How to prevent a script from running until a page loads\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/Window\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo\n[3]: https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeby\n[4]: http://ryanmorr.com/understanding-scope-and-context-in-javascript/\n[5]: https://flaviocopes.com/javascript-async-defer/\n[6]: https://caniuse.com/#search=async%20attribute%20for%20external%20scripts\n[7]: https://caniuse.com/#search=defer%20attribute%20for%20external%20scripts\n[wikipedia]: https://en.wikipedia.org/\n"
  },
  "success": true
}