{
  "template": {
    "taskId": "724c47fb-540c-4aa7-bdb2-af6dd47f2c1f",
    "name": "Web Storage",
    "repo": "Modular-Curriculum",
    "path": "content/dom/topics/storage/readings/reading-web-storage.md",
    "type": "Reading",
    "timeEstimate": 540,
    "urls": [
      "web-storage"
    ],
    "topic": "Homework for Thursday",
    "subtopic": "Homework",
    "body": "# Using Web Storage To Store Data In The Browser\n\nLike cookies, the [Web Storage API][1] allows browsers to store data in the\nform of key-value pairs. Web Storage has a much larger storage limit than\ncookies, making it a useful place to store data on the client side.\n\nIn the cookies reading, we reviewed the two main mechanisms of Web Storage:\n`sessionStorage` and `localStorage`. While `sessionStorage` persists for the\nduration of the session and ends when a user closes the browser, `localStorage`\npersists past the current session and has no expiration date.\n\nOne typical use case for local storage is caching data fetched from\na server on the client side. Instead of making multiple network requests to the\nserver to retrieve data, which takes time and might slow page load, we can\nfetch the data once and store that data in local storage. Then, our website\ncould read the persisting data stored in localStorage, meaning our website\nwouldn't have to depend on our server's response - even if the user closes their\nbrowser!\n\nIn this reading, we’ll go over how to store and read a key-value pair in local\nstorage.\n\n## Storing data in local storage\n\nWeb Storage exists in the window as an object, and we can access it by using\n[Window.localStorage][2]. As we previously reviewed, with window properties we\ncan omit the _”window”_ part and simply use the property name, `localStorage`.\n\nWe can set a key-value pair in local storage with a single line of code. Here\nare a few examples:\n\n```js\nlocalStorage.setItem('eatz', 'I <3 falafel');\nlocalStorage.setItem('coffee', 'black');\nlocalStorage.setItem('doughnuts', '[\"glazed\", \"chocolate\", \"blueberry\",\n\"cream-filled\"]');\n```\n\nThe code above calls the `setItem()` method on the Storage object and sets a\nkey-value pair. Examples: `eatz` (key) and `I <3 falafel` (value), `coffee`\n(key) and `black` (value), and `doughnut` (key) and `[\"glazed\", \"chocolate\",\n\"blueberry\", \"cream-filled\"]` (value). Both the key and the value must be\nstrings.\n\n## Reading data in local storage\n\nIf we wanted to retrieve a key-value pair from local storage, we\ncould use `getItem()` with a key to find the corresponding value. See the\nexample below:\n\n```js\nlocalStorage.setItem('eatz', 'I <3 falafel');\nlocalStorage.setItem('coffee', 'black');\nlocalStorage.setItem('doughnuts', '[\"glazed\", \"chocolate\", \"blueberry\",\n\"cream-filled\"]');\n\nconst eatz = localStorage.getItem('eatz');\nconst coffee = localStorage.getItem('coffee');\nconst doughnuts = localStorage.getItem('doughnuts');\n\nconsole.log(eatz); // 'I <3 falafel'\nconsole.log(coffee); // 'black'\nconsole.log(doughnuts); // '[\"glazed\", \"chocolate\", \"blueberry\", \"cream-filled\"]'\n```\n\nThe above code reads the item with a key of `eatz`, the item with a key of\n`doughnut`, and the item with a key of `coffee`. We stored these in variables\nfor handy use in any function we write.\n\nCheck the MDN docs on [localStorage][2] for other methods on the Storage\nobject to remove and clear all key-value pairs.\n\n## JSON and local storage\n\nWhen we store and read data in local storage, we're actually storing [JSON][3]\nobjects. JSON is text format that is independent from JavaScript but\nalso resembles JavaScript object literal syntax. It's important to note that\nJSON exists as a _string_.\n\nWebsites commonly get JSON back from a server request in the form of a\ntext file with a `.json` extension and a MIME type of `application/json`. We can\nuse JavaScript to parse a JSON response in order to work with it as a regular\nJavaScript object.\n\nLet's look at the `doughnuts` example from above:\n\n```js\nlocalStorage.setItem('doughnuts', '[\"glazed\", \"chocolate\", \"blueberry\",\n\"cream-filled\"]');\nconst doughnuts = localStorage.getItem('doughnuts');\nconsole.log(doughnuts + \" is a \" + typeof doughnuts);\n// prints '[\"glazed\", \"chocolate\", \"blueberry\", \"cream-filled\"] is a string'\n```\n\nIf we ran the code above in the browser console, we'd see that `doughnuts` is a\nstring value because it's a JSON value. However, we want to be able to store\n`doughnuts` as an _array_, in order to iterate through it or map it or any\nother nifty things we can do to arrays.\n\nWe can construct a JavaScript value or object from JSON by parsing it:\n\n```js\nconst doughnuts = JSON.parse(localStorage.getItem('doughnuts'));\n```\n\nWe used [JSON.parse()][4] to parse the string into JavaScript. If we printed\nthe parsed value of `doughnuts` to the console, we'd see it's a\nplain ol' JavaScript array!\n\nSee the MDN doc on [Working with JSON][5] for more detail about using\nJSON and JavaScript.\n\n## What you learned:\n\n* Why we use local storage\n* How to store data in local storage\n* How to read data in local storage\n* How storage objects are JSON that we need to parse\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n[3]: https://json.org/\n[4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\n[5]: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON\n"
  },
  "success": true
}