{
  "template": {
    "taskId": "059292bb-0f23-43ed-bacf-559d28a350a4",
    "name": "Querying With Sequelize",
    "repo": "Modular-Curriculum",
    "path": "content/relational-databases/topics/orm/readings/reading-04-querying-using-sequelize-orm-js.md",
    "type": "Reading",
    "timeEstimate": 1800,
    "urls": [
      "querying-with-sequelize"
    ],
    "topic": "Homework for Thursday",
    "subtopic": "Homework",
    "body": "# Querying Using Sequelize\n\nWe have already seen how to find a single record by primary key:\n`findByPk`. In this reading we will learn about more advanced ways to\nquery a table. We will learn how to:\n\n* Fetch all `Cats` whose name is `\"Markov\"`,\n* Fetch all `Cats` whose name is `\"Markov\"` **OR** `\"Curie\"`,\n* Fetch all `Cats` whose age is **not** 5,\n* Fetch all `Cats` whose name is `\"Markov\"` **AND** whose age is 5,\n* Fetch all `Cats` whose age is **less than** 5,\n\nWe will also learn how to:\n\n* Order `Cats` results by age (descending or ascending),\n* Limit `Cats` results to a finite number.\n\n## Basic Usage Of `findAll` To Retrieve Multiple Records\n\nLet's consider a simple example where we want to retrieve all the `Cats`\nin the database:\n\n```javascript\nconst { sequelize, Cat } = require(\"./models\");\n\nasync function main() {\n  // `findAll` asks to retrieve _ALL_ THE CATS!!  An array of `Cat`\n  // objects will be returned.\n  const cats = await Cat.findAll();\n\n  // Log the fetched cats.\n  console.log(JSON.stringify(cats, null, 2));\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nSince this is an array we can't use that `.toJSON()` method we learned earlier,\nso we can instead use `JSON.stringify` on the Array.\n\nPro tip: giving a 3rd argument to `JSON.stringify` will pretty-print the\nresult with the specified spacing. (We pass `null` as the 2nd argument\nto skip it.) You can read more at the [`JSON.stringify`\ndocs][stringify-docs].\n\n[stringify-docs]:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n\nRunning this code prints:\n\n```\nExecuting (default): SELECT \"id\", \"firstName\", \"specialSkill\", \"age\", \"createdAt\", \"updatedAt\" FROM \"Cats\" AS \"Cat\";\n[\n  {\n    \"id\": 4,\n    \"firstName\": \"Markov\",\n    \"specialSkill\": \"sleeping\",\n    \"age\": 5,\n    \"createdAt\": \"2020-02-11T23:03:25.388Z\",\n    \"updatedAt\": \"2020-02-11T23:03:25.388Z\"\n  },\n  {\n    \"id\": 5,\n    \"firstName\": \"Curie\",\n    \"specialSkill\": \"jumping\",\n    \"age\": 4,\n    \"createdAt\": \"2020-02-11T23:03:25.398Z\",\n    \"updatedAt\": \"2020-02-11T23:03:25.398Z\"\n  }\n]\n```\n\nIt isn't typical to want to fetch *every* record. We typically want to\nget only those records that match some criterion. In SQL, we use a\n`WHERE` clause to do this. With Sequelize, we issue a `WHERE` query like\nso:\n\n```javascript\nconst { sequelize, Cat } = require(\"./models\");\n\nasync function main() {\n  // Fetch all cats named Markov.\n  const cats = await Cat.findAll({\n    where: {\n      firstName: \"Markov\",\n    },\n  });\n  console.log(JSON.stringify(cats, null, 2));\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nWhich prints:\n\n```\nExecuting (default): SELECT \"id\", \"firstName\", \"specialSkill\", \"age\", \"createdAt\", \"updatedAt\" FROM \"Cats\" AS \"Cat\" WHERE \"Cat\".\"firstName\" = 'Markov';\n[\n  {\n    \"id\": 4,\n    \"firstName\": \"Markov\",\n    \"specialSkill\": \"sleeping\",\n    \"age\": 5,\n    \"createdAt\": \"2020-02-11T23:03:25.388Z\",\n    \"updatedAt\": \"2020-02-11T23:03:25.388Z\"\n  }\n]\n```\n\nWe've passed the `findAll` class method the `where` option. The `where`\noption tells Sequelize to use a `WHERE` clause. The option value passed\nis `{ firstName: \"Markov\" }`. This tells Sequelize to only return those\n`Cats` where `firstName` is equal to `\"Markov\"`.\n\nIf we wanted to select those `Cats` named Markov **OR** Curie, we can\nmap `firstName` to an array of `[\"Markov\", \"Curie\"]`. For example:\n\n```javascript\nconst { sequelize, Cat } = require(\"./models\");\n\nasync function main() {\n  // Fetch all cats named either Markov or Curie.\n  const cats = await Cat.findAll({\n    where: {\n      firstName: [\"Markov\", \"Curie\"],\n    },\n  });\n  console.log(JSON.stringify(cats, null, 2));\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nThis prints:\n\n```\nExecuting (default): SELECT \"id\", \"firstName\", \"specialSkill\", \"age\", \"createdAt\", \"updatedAt\" FROM \"Cats\" AS \"Cat\" WHERE \"Cat\".\"firstName\" IN ('Markov', 'Curie');\n[\n  {\n    \"id\": 4,\n    \"firstName\": \"Markov\",\n    \"specialSkill\": \"sleeping\",\n    \"age\": 5,\n    \"createdAt\": \"2020-02-11T23:03:25.388Z\",\n    \"updatedAt\": \"2020-02-11T23:03:25.388Z\"\n  },\n  {\n    \"id\": 5,\n    \"firstName\": \"Curie\",\n    \"specialSkill\": \"jumping\",\n    \"age\": 4,\n    \"createdAt\": \"2020-02-11T23:03:25.398Z\",\n    \"updatedAt\": \"2020-02-11T23:03:25.398Z\"\n  }\n]\n```\n\nThe difference is that we've passed `{ firstName: [\"Markov\", \"Curie\"\n]}`. Sequelize will return all `Cats` whose `firstName` matches either\n`\"Markov\"` or `\"Curie\"`.\n\n## Using `findAll` To Find Objects Not Matching A Criterion\n\nWe can also find all the `Cats` whose names are **NOT** Markov, but we will\nneed to require in the `Op` object from Sequelize so we can use the \"not equal\" operator from it:\n\n```javascript\nconst { Op } = require(\"sequelize\");\nconst { sequelize, Cat } = require(\"./db/models\");\n\nasync function main() {\n  const cats = await Cat.findAll({\n    where: {\n      firstName: {\n        // Op.ne means the \"not equal\" operator.\n        [Op.ne]: \"Markov\",\n      },\n    },\n  });\n  console.log(JSON.stringify(cats, null, 2));\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nPrints:\n\n```\nExecuting (default): SELECT \"id\", \"firstName\", \"specialSkill\", \"age\", \"createdAt\", \"updatedAt\" FROM \"Cats\" AS \"Cat\" WHERE \"Cat\".\"firstName\" != 'Markov';\n[\n  {\n    \"id\": 5,\n    \"firstName\": \"Curie\",\n    \"specialSkill\": \"jumping\",\n    \"age\": 4,\n    \"createdAt\": \"2020-02-11T23:03:25.398Z\",\n    \"updatedAt\": \"2020-02-11T23:03:25.398Z\"\n  }\n]\n```\n\nThis is our first example of a Sequelize\n[_operator_][sequelize-operator-docs]: `Op.ne`. `ne` stands for \"not\nequal.\" Instead of mapping `firstName` to a single value like `\"Markov\"`\nor an array of values like `[\"Markov\", \"Curie\"]`, we have mapped it to:\n\n```javascript\n{ [Op.ne]: \"Markov\" }\n```\n\nHow does this work? `Op.ne` is a JavaScript _symbol_: `Op.ne ===\nSymbol.for('ne')`. To simplify, let's just imagine that `Op.ne ===\n\"ne\"`.\n\nWhen we write `{ [Op.ne]: \"Markov\" }`, the `[]` brackets perform key\ninterpolation. So this is equal to `{ \"ne\": \"Markov\" }`. So overall, we\nare effectively writing:\n\n```javascript\ndb.Cat.findAll({\n  where: {\n    // Won't exactly work (you need to use `[Op.ne]` after all). Does\n    // illustrate the concept though.\n    firstName: { \"ne\": \"Markov\" },\n  },\n})\n```\n\nThis perhaps makes it clearer how Sequelize understands what we want.\nSequelize is being passed an *object* as the `firstName` value. The\nobject is specifying that we want to do a `!=` SQL operation by using\nthe `\"ne\"` (\"not equal\") key. The value to \"not equal\" is specified as\n`\"Markov\"`.\n\n## Combining Criteria with `Op.and`\n\nWe've seen one way to do an `OR` operation above (by mapping a column\nname to an array of values). Let's see how to do an `AND` operation:\n\n```javascript\nconst { Op } = require(\"sequelize\");\nconst { sequelize , Cat } = require(\"./models\");\n\nasync function main() {\n  // fetch cats with name != Markov AND age = 4.\n  const cats = await Cat.findAll({\n    where: {\n      firstName: {\n        [Op.ne]: \"Markov\",\n      },\n      age: 4,\n    },\n  });\n  console.log(JSON.stringify(cats, null, 2));\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nThis prints:\n\n```\nExecuting (default): SELECT \"id\", \"firstName\", \"specialSkill\", \"age\", \"createdAt\", \"updatedAt\" FROM \"Cats\" AS \"Cat\" WHERE \"Cat\".\"firstName\" != 'Markov' AND \"Cat\".\"age\" = 4;\n[\n  {\n    \"id\": 5,\n    \"firstName\": \"Curie\",\n    \"specialSkill\": \"jumping\",\n    \"age\": 4,\n    \"createdAt\": \"2020-02-11T23:03:25.398Z\",\n    \"updatedAt\": \"2020-02-11T23:03:25.398Z\"\n  }\n]\n```\n\nSimply by listing more key/value pairs in the `where` object, we ask\nSequelize to \"AND\" together multiple criteria.\n\nAnother way to do the same thing is like so:\n\n```javascript\nconst { Op } = require(\"sequelize\");\nconst { sequelize , Cat } = require(\"./models\");\n\nasync function main() {\n  const cats = await db.Cat.findAll({\n    where: {\n      [Op.and]: [\n        { firstName: { [Op.ne]: \"Markov\" } },\n        { age: 4 },\n      ],\n    },\n  });\n  console.log(JSON.stringify(cats, null, 2));\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nThe use of the `Op.and` operator is somewhat similar to `Op.ne`. This\ntime we map `Op.and` to an *array* of criteria. Returned records must\nmatch all the criteria.\n\n## Combining Criteria with `Op.or`\n\nWe've already seen how to do an `OR` to match a *single column* against\n*multiple values*. You can use `Op.or` for even greater flexibility:\n\n```javascript\nconst { Op } = require(\"sequelize\");\nconst { sequelize, Cat } = require(\"./models\");\n\nasync function main() {\n  // fetch cats with name == Markov OR age = 4.\n  const cats = await Cat.findAll({\n    where: {\n      [Op.or]: [\n        { firstName: \"Markov\" },\n        { age: 4 },\n      ],\n    },\n  });\n  console.log(JSON.stringify(cats, null, 2));\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nThis prints:\n\n```\nExecuting (default): SELECT \"id\", \"firstName\", \"specialSkill\", \"age\", \"createdAt\", \"updatedAt\" FROM \"Cats\" AS \"Cat\" WHERE (\"Cat\".\"firstName\" = 'Markov' OR \"Cat\".\"age\" = 4);\n[\n  {\n    \"id\": 4,\n    \"firstName\": \"Markov\",\n    \"specialSkill\": \"sleeping\",\n    \"age\": 5,\n    \"createdAt\": \"2020-02-11T23:03:25.388Z\",\n    \"updatedAt\": \"2020-02-11T23:03:25.388Z\"\n  },\n  {\n    \"id\": 5,\n    \"firstName\": \"Curie\",\n    \"specialSkill\": \"jumping\",\n    \"age\": 4,\n    \"createdAt\": \"2020-02-11T23:03:25.398Z\",\n    \"updatedAt\": \"2020-02-11T23:03:25.398Z\"\n  }\n]\n```\n\nOur query is to find all cats whose names are \"Markov\" and whose age is\n4. Therefore both cats are returned: Markov and Curie (whose age is 4).\n\n## Querying With Comparisons\n\nWe can use operators like `Op.gt` (greater than) and `Op.lt` (less than)\nto select by comparing values. We use these just like `Op.ne`:\n\n```javascript\nconst { Op } = require(\"sequelize\");\nconst { sequelize, Cat } = require(\"./models\");\n\nasync function main() {\n  // Fetch all cats whose age is > 4.\n  const cats = await Cat.findAll({\n    where: {\n      age: { [Op.gt]: 4 },\n    },\n  });\n  console.log(JSON.stringify(cats, null, 2));\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nThis prints:\n\n```\nExecuting (default): SELECT \"id\", \"firstName\", \"specialSkill\", \"age\", \"createdAt\", \"updatedAt\" FROM \"Cats\" AS \"Cat\" WHERE \"Cat\".\"age\" > 4;\n[\n  {\n    \"id\": 4,\n    \"firstName\": \"Markov\",\n    \"specialSkill\": \"sleeping\",\n    \"age\": 5,\n    \"createdAt\": \"2020-02-11T23:03:25.388Z\",\n    \"updatedAt\": \"2020-02-11T23:03:25.388Z\"\n  }\n]\n```\n\n## Ordering Results\n\nWe've seen how to use a `where` query option to filter results with a\nSQL `WHERE` clause. We can use the `order` query option to perform a SQL\n`ORDER BY`:\n\n```javascript\nconst { sequelize, Cat } db = require(\"./models\");\n\nasync function main() {\n  const cats = await Cat.findAll({\n    order: [[\"age\", \"DESC\"]],\n  });\n  console.log(JSON.stringify(cats, null, 2));\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nThis prints:\n\n```\nExecuting (default): SELECT \"id\", \"firstName\", \"specialSkill\", \"age\", \"createdAt\", \"updatedAt\" FROM \"Cats\" AS \"Cat\" ORDER BY \"Cat\".\"age\" DESC;\n[\n  {\n    \"id\": 4,\n    \"firstName\": \"Markov\",\n    \"specialSkill\": \"sleeping\",\n    \"age\": 5,\n    \"createdAt\": \"2020-02-11T23:03:25.388Z\",\n    \"updatedAt\": \"2020-02-11T23:03:25.388Z\"\n  },\n  {\n    \"id\": 5,\n    \"firstName\": \"Curie\",\n    \"specialSkill\": \"jumping\",\n    \"age\": 4,\n    \"createdAt\": \"2020-02-11T23:03:25.398Z\",\n    \"updatedAt\": \"2020-02-11T23:03:25.398Z\"\n  }\n]\n```\n\nWe've specified `{ order: [[\"age\", \"DESC\"]] }`. Notice how we specify\nthe sort order with a doubly-nested array. If we wanted to sort\nascending we could more simply write: `{ order: [\"age\"] }`.\n\nWhat if we wanted to sort by *two* columns? For instance, say we wanted\nto `SORT BY age DESC, firstName`. We would write: `{ order: [[\"age\",\n\"DESC\"], \"firstName\"] }`. That would sort descending by `age`, and then\nascending by `firstName` for cats with the same age.\n\n## Limiting Results and `findOne`\n\nIf we want only the oldest cat we can use the `limit` query option:\n\n```javascript\nconst { sequelize, Cat } = require(\"./models\");\n\nasync function main() {\n  const cats = await Cat.findAll({\n    order: [[\"age\", \"DESC\"]],\n    limit: 1,\n  });\n  console.log(JSON.stringify(cats, null, 2));\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nThis selects only one (the oldest) cat:\n\n```\nExecuting (default): SELECT \"id\", \"firstName\", \"specialSkill\", \"age\", \"createdAt\", \"updatedAt\" FROM \"Cats\" AS \"Cat\" ORDER BY \"Cat\".\"age\" DESC LIMIT 1;\n[\n  {\n    \"id\": 4,\n    \"firstName\": \"Markov\",\n    \"specialSkill\": \"sleeping\",\n    \"age\": 5,\n    \"createdAt\": \"2020-02-11T23:03:25.388Z\",\n    \"updatedAt\": \"2020-02-11T23:03:25.388Z\"\n  }\n]\n```\n\nSince we know that there will be only one result, it is pointless to\nreturn an array. In cases when we want a maximum of one result, we can\nuse `findOne`:\n\n```javascript\nconst { sequelize, Cat } = require(\"./models\");\n\nasync function main() {\n  const cat = await Cat.findOne({\n    order: [[\"age\", \"DESC\"]],\n  });\n  console.log(JSON.stringify(cat, null, 2));\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nWhich prints:\n\n```\n>> node index.js\nExecuting (default): SELECT \"id\", \"firstName\", \"specialSkill\", \"age\", \"createdAt\", \"updatedAt\" FROM \"Cats\" AS \"Cat\" ORDER BY \"Cat\".\"age\" DESC LIMIT 1;\n{\n  \"id\": 4,\n  \"firstName\": \"Markov\",\n  \"specialSkill\": \"sleeping\",\n  \"age\": 5,\n  \"createdAt\": \"2020-02-11T23:03:25.388Z\",\n  \"updatedAt\": \"2020-02-11T23:03:25.388Z\"\n}\n```\n\nThis returned the `Cat` object directly, not wrapped in an array.\n\nIf there is no record matching the criteria passed to `findOne`, it will\nreturn `null` (rather than an empty array):\n\n```javascript\nconst { sequelize, Cat } = require(\"./models\");\n\nasync function main() {\n  // Try to find a non-existant cat.\n  const cat = await Cat.findOne({\n    where: {\n      firstName: \"Franklin Delano Catsevelt\",\n    },\n  });\n  console.log(JSON.stringify(cat, null, 2));\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nNo such cat exists:\n\n```\nExecuting (default): SELECT \"id\", \"firstName\", \"specialSkill\", \"age\", \"createdAt\", \"updatedAt\" FROM \"Cats\" AS \"Cat\" WHERE \"Cat\".\"firstName\" = 'Franklin Delano Catsevelt' LIMIT 1;\nnull\n```\n\n## Conclusion\n\nWe've scratched the surface of the many query options supported by\nSequelize. You may find more information as necessary by reading the\n[Sequelize querying documentation][querying-documentation]. You can in\nparticular review the [list of Sequelize query\noperators][sequelize-operator-docs].\n\nNow that you've completed this reading you should know how to:\n\n* Use the `where` query option,\n* Use the `Op.and` operator to match **all** of multiple criteria,\n* Use the `Op.or` operator to match **any** of multiple criteria,\n* Use the `Op.ne` to match rows where the value **does not equal** the\n  specified value,\n* Use the `Op.gt`, `Op.lt` operators to **compare** values,\n* Use the `order` query option to **order** results,\n* Use the `limit` query option to **limit** the number of returned\n  results,\n* Use `findOne` when only one result is expected or desired.\n\n[querying-documentation]: https://sequelize.org/v5/manual/querying.html\n[sequelize-operator-docs]: https://sequelize.org/v5/manual/querying.html#operators\n"
  },
  "success": true
}