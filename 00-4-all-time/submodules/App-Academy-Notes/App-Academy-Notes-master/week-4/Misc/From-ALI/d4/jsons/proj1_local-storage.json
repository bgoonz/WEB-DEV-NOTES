{
  "template": {
    "taskId": "242cbba2-cbc2-4ac6-a9a1-ec6683d0bbd6",
    "name": "Local Storage Project",
    "repo": "Modular-Curriculum",
    "path": "content/dom/topics/storage/projects/local-storage/README.md",
    "type": "Project",
    "timeEstimate": 7200,
    "urls": [
      "local-storage-project"
    ],
    "topic": "Thursday - JSON and Storage",
    "subtopic": "Practices",
    "download": "https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-DOM-API/storage/projects/local-storage-project.zip",
    "solution": "https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-DOM-API/storage/projects/local-storage-project-solution.zip",
    "body": "# Project: Shop Local Storage!\n\nLearning how to set up an online shop is useful for everyone from large\ne-commerce companies to an indie small business owner with a hobby website.\nShopping carts are an integral part of any online store. In this project you\nwill set one up with JavaScript -- and then, sell, baby, sell!\n\nAs we previously reviewed, `localStorage` is an ideal place to store data in\nthe browser without affecting the server-side database. One use-case for\n`localStorage` is saving a user’s shopping cart so it persists from page to\npage. Now that you know how to set and get items in `localStorage`, put that\nknowledge to use in this project.\n\nIn this project, you will practice:\n\n* Setting up a quick shopping cart\n* Storing items in `localStorage`\n* Reading items in `localStorage`\n* Removing an item from `localStorage`\n\n## Project overview\n\nWe’ve set up a project folder called **local-storage-project.zip**. Use these files to complete the project.\n\nWe have filled out the HTML file with a few elements and the CSS with some\nbasic styles to represent a page where users can add items to a shopping cart.\nOpen **storage-project.html** in a browser to see what this page looks like.\n\nIn Phases 1-3, you will write JavaScript functions to let the user do the\nfollowing:\n\n* Add an item to the shopping cart (_i.e. store the item in `localStorage`_)\n* Display the items in the shopping cart (_i.e. read the item in\n`localStorage`_)\n* Remove an item from the shopping cart (_i.e. remove the item from\n`localStorage`_)\n\n## Phase 1: Write a function to store an item in the cart\n\nOur HTML file contains a simple form with a couple of inputs and a submit\nbutton, as well as an area to display cart items.\n\nIn a code editor, open the **storage-project.js** file, where you’ll write all\nof your JavaScript. You should see an event listener for `DOMContentLoaded`\nbecause, again, it’s a good idea to wrap functions that manipulate the DOM in\nthis listener (or else, have a bad time with async issues!).\n\nThe first order of business is to write a function that stores the form values\nin `localStorage` whenever the user clicks the `add-to-cart` button. This\nfunction should:\n\n* Listen for a click event\n* Grab the form values\n* Store the item in `localStorage`\n\n_Hint: Recall that we use [Storage.setItem()][1] to set a key-value pair in\n`localStorage`._\n\n## Phase 2: Write a function to display the cart items\n\nThe second order of business is to write a function to display the items that\nhave been saved in `localStorage` to the Shopping Cart part of the page. In\nyour HTML file, this is represented by the `div` with an ID of `shopping-cart`.\nThis function should:\n\n* Retrieve the item(s) stored in `localStorage`\n* Insert the items into the DOM in the `shopping-cart` DIV\n* Display both the item’s name and its quantity\n\n_Hint: You might want to use a loop!_\n\n_Hint: Recall that we use [Storage.getItem(key)][2] to get a value via its\nkey._\n\n_Hint: We can also use [Storage.key(index)][3] to get a key name via its\nindex._\n\n## Phase 3: Write a function to remove items from the cart\n\nThe last thing we need to have a fully functional cart is for the user to be\nable to remove items from the cart. Write a function that lets the user remove\nitems from their cart. In order to do this, you might want to add to or amend\nthe function you wrote in Phase 2.\n\nInsert **Remove** buttons next to each cart item you inserted on the page. Then,\nwrite a function that does the following:\n\n* Listen for a click event on the “Remove” buttons\n* Remove the corresponding item from `localStorage`\n* Remove the item from the `shopping-cart` DIV\n\n_Hint: We can use [Storage.removeItem()][4] to remove an item from\n`localStorage`._\n\n_Hint: We can use [document.querySelectorAll()][5] to get a Node List of the\nbuttons. Then, loop through the list._\n\n_Hint: Recall what you know about [event.target][6] and [Element.parentNode][7].\nIt would be helpful to store the item’s key in an ID attribute on the Remove\nbutton or the button’s containing DIV, so that you know which corresponding\nkey-value pair to remove from `localStorage`._\n\n_Hint: We can use [location.reload][8] to refresh the page when an item is\nremoved. If everything is working correctly, the other cart items should still\ndisplay after a page refresh._\n\n## Check that your shopping cart functions correctly\n\nAfter you’ve written your JS, test that the page functions as it should. A user\nshould be able to add an item with a given quantity to the cart. You should be\nable to see this item in `localStorage` in your browser’s Developer Tools, and\nit should show up in the Shopping Cart section of the page.\n\nWhen a user removes an item by clicking the “Remove” button, that item should\nbe removed from `localStorage` as well as the page.\n\nWhen you refresh the page, or close and reopen the browser, the cart items that\nhave not been removed should still appear on the page.\n\n## Bonus A: Update cart item quantities and reset values\n\nInstead of displaying text values of the item quantities (e.g. “1”, “5”, “12”)\non the page, replace those with an [HTML5 number spinner][9]. What’s that, you\nask? It’s really just a fancy way to say an input field that lets you increment\nand decrement a number value. We’ve actually already used one on the page.\nCheck the input for `quantity` for an example.\n\nWhen a user increments or decrements the input value of an item’s quantity, get\nthe input value and use it to update the corresponding key-value pair in\n`localStorage`.\n\n## Bonus B: Calculate the item totals\n\nCurrently, if a user adds an item to the cart, let’s say **Apples: 1**, and\nthen adds that same item to the cart again with a different value, let’s say\n**Apples: 3**, the value in `localStorage` gets overwritten with the new value\n-- **Apples: 3**.\n\nWrite a function to calculate the total quantity added to the cart, instead of\nrewriting the value. Using the above example, the actual total would be\n**Apples: 4**. After calculating the total quantity of an item, update the\ncorresponding key-value pair in `localStorage` with the total.\n\nWhen you’ve finished all of the above, congratulate yourself for all the hard\nwork. You made a shopping cart!\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem\n[3]: https://developer.mozilla.org/en-US/docs/Web/API/Storage/key\n[4]: https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem\n[5]: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n[6]: https://developer.mozilla.org/en-US/docs/Web/API/Event/target\n[7]: https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode\n[8]: https://developer.mozilla.org/en-US/docs/Web/API/Location/reload\n[9]: https://www.html5tutorial.info/html5-number.php\n"
  },
  "success": true
}