{
  "template": {
    "taskId": "e61aab79-3022-408b-a910-8141b2b4fca7",
    "name": "Installing PostgreSQL on Windows",
    "repo": "Modular-Curriculum",
    "path": "content/relational-databases/topics/sql/readings/reading-01b-installing-postgres-for-windows-sql.md",
    "type": "Reading",
    "timeEstimate": 0,
    "urls": [
      "installing-postgresql-on-windows"
    ],
    "topic": "Monday - Hello, Database!",
    "subtopic": "Lecture",
    "body": "# Installing PostgreSQL 12 and Postbird on Windows\n\nYou will install three pieces of software so that you can start using\nPostgreSQL. You will install PostgreSQL itself on your Windows installation.\nThen, you will install `psql` in your Ubuntu installation. Then you will also\ninstall Postbird, a cross-platform graphical user interface that makes working\nwith SQL and PostgreSQL better than just using the command line tool `psql`.\n\nWhen you read \"installation\", that means the actual OS that's running on your\nmachine. So, you have a Windows installation, Windows 10, that's running when\nyou boot your computer. Then, when you start the Ubuntu installation, it's as if\nthere's a completely separate computer running inside your computer. It's like\nhaving two completely different laptops.\n\n## Installing PostgreSQL 12\n\nTo install PostgreSQL 12, you need to download the installer from the Internet.\nPostgreSQL's commercial company, Enterprise DB, offers installers for PostgreSQL\nfor every major platform.\n\nOpen https://www.enterprisedb.com/downloads/postgres-postgresql-downloads. Click\nthe link for PostgreSQL 12 for Windows x86-64.\n\n![Download PostgreSQL]\n\nOnce that installer downloads, run it. You need to go through the normal steps\nof installing software.\n\n* Yes, Windows, let the installer make changes to _my_ device.\n* Thanks for the welcome. Next.\n* Yeah, that's a good place to install it. Next.\n* I don't want that pgAdmin nor the Stack Builder things. Uncheck. Uncheck.\n  Next.\n\n  ![Deselect pgAdmin 4 and Stack Builder components]\n\n* Also, great looking directory. Thanks. Next.\n* Oooh! A password! I'll enter ********. I sure won't forget that because, if I\n  do, I'll have to uninstall and reinstall PostgreSQL and lose all of my hard\n  work. **Seriously, write down this password or use one you will not forget.**\n  Next.\n* Sure. 5432. Good to go. Next.\n* Not even sure what that means. Default! Next.\n* Yep. Looks good. Next.\n* Geez. Really? Thanks. Next.\n* _Time to get a tea._\n* All right! All done. Finish!\n\n## Installing PostgreSQL Client Tools on Ubuntu\n\nNow, to install the PostgreSQL Client tools for Ubuntu. You need to do this so\nthat the Node.js (and later Python) programs running on your Ubuntu installation\ncan access the PostgreSQL server running on your Windows installation. You need\nto tell `apt`, the package manager, that you want it to go find the PostgreSQL\n12 client tools from PostgreSQL itself rather than the common package\nrepositories. You do that by issuing the following two commands. Copy and paste\nthem one at a time into your shell. (If your Ubuntu shell isn't running, start\none.)\n\n**Pro-tip**: Copy those commands because you're not going to type them, right?\nAfter you copy one of them, you can just right-click on the Ubuntu shell. That\nshould paste them in there for you.\n\n```shell\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\n```\n\nIf prompted for your password, type it.\n\n```shell\necho \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" | sudo tee  /etc/apt/sources.list.d/pgdg.list\n```\n\nThe last line of output of those two commands running should read \"OK\". If it\ndoes not, try copying and pasting them one at a time.\n\nNow that you've registered the PostgreSQL repositories as a source to look for\nPostgreSQL, you need to update the `apt` registry. You should do this before you\ninstall _any_ software on Ubuntu.\n\n```shell\nsudo apt update\n```\n\nOnce that's finished running, the new entries for PostgreSQL 12 should be in the\nrepository. Now, you can install them with the following command.\n\n```shell\nsudo apt install postgresql-client-12 postgresql-common\n```\n\nIf it asks you if you want to install them, please tell it \"Y\".\n\nTest that it installed by typing `psql --version`. You should see it print out\ninformation about the version of the installed tools. If it tells you that it\ncan't find the command, try these instructions over.\n\n## Configuring the client tools\n\nSince you're going to be accessing the PosgreSQL installation from your Ubuntu\ninstallation on your Windows installation, you're going to have to type that\nyou want to access it over and over, which means extra typing. To prevent you\nfrom having to do this, you can customize your shell to always add the extra\ncommands for you.\n\nThis assumes you're still using Bash. If you changed the shell that your Ubuntu\ninstallation uses, please follow that shell's directions for adding an alias to\nits startup file.\n\nMake sure you're in your Ubuntu home directory. You can do that by typing `cd`\nand hitting enter. Use `ls` to find out if you have a `.bashrc` file. Type\n`ls .bashrc`. If it shows you that one exists, that's the one you will add\nthe alias to. If it tells you that there is no file named that, then type `ls\n.profile`. If it shows you that one exists, that's the one you will add the\nalias to. If it shows you that it does not exist, then use the file name\n`.bashrc` in the following section.\n\nNow that you know which profile file to use, type `code «profile file name»`\nwhere \"profile file name\" is the name of the file you determined from the last\nsection. Once Visual Studio Code starts up with your file, at the end of it (or\nif you've already added aliases, in that section), type the following.\n\n```shell\nalias psql=\"psql -h localhost\"\n```\n\nWhen you run `psql` from the command line, it will now always add the part about\nwanting to connect to _localhost_ every time. You would have to type that each\ntime, otherwise.\n\nTo make sure that you set that up correctly, type `psql -U postgres postgres`.\nThis tells the `psql` client that you want to connect as the user \"postgres\"\n(`-U postgres`) to the database postgres (`postgres` at the end), which is the\ndefault database created when PostgreSQL is installed. It will prompt you for a\npassword. Type the password that you used when you installed PostgrSQL, earlier.\nIf the alias works correctly and you type the correct password, then you should\nsee something like the following output.\n\n```shell\npsql (12.2 (Ubuntu 12.2-2.pgdg18.04+1))\nType \"help\" for help.\n\npostgres=#\n```\n\nType `\\q` and hit Enter to exit the PostgreSQL client tool.\n\nNow, you will add a user for your Ubuntu identity so that you don't have to\nspecify it all the time. Then, you will create a file that PostgreSQL will use\nto automatically send your password every time.\n\nCopy and paste the following into your Ubuntu shell. Think of a password that\nyou want to use for your user. **Replace the password in the single quotes in the\ncommand with the password that you want.** It _has_ to be a non-empty string.\nPostgreSQL doesn't like it when it's not.\n\n```shell\npsql -U postgres -c \"CREATE USER `whoami` WITH PASSWORD 'password' SUPERUSER\"\n```\n\nIt should prompt you for a password. Type the password that you created when you\ninstalled PostgreSQL. Once you type the correct password, you should see \"CREATE\nROLE\".\n\nNow you will create your PostgreSQL password file. Type the following into your\nUbuntu shell to open Visual Studio Code and create a new file.\n\n```shell\ncode ~/.pgpass\n```\n\nIn that file, you will add this line, which tells it that on localhost for port\n5432 (where PostgreSQL is running), for all databases (*), **use your Ubuntu user\nname and the password that you just created for that user with the `psql`\ncommand you just typed.** (If you have forgotten your Ubuntu user name, type\n`whoami` on the command line.) Your entry in the file should have this format.\n\n```\nlocalhost:5432:*:«your Ubuntu user name»:«the password you just used»\n```\n\nFor the curriculum writers' systems, it looks like this in Visual Studio Code.\n\n![pgpass file]\n\nOnce you have that information in the file, save it, and close Visual Studio\nCode.\n\nThe last step you have to take is change the permission on that file so that it\nis only readable by your user. PostgreSQL will ignore it if just anyone can read\nand write to it. This is for _your_ security. Change the file permissions so\nonly you can read and write to it. You did this once upon a time. Here's the\ncommand.\n\n```shell\nchmod go-rw ~/.pgpass\n```\n\nYou can confirm that only you have read/write permission by typing `ls -al\n~/.pgpass`. That should return output that looks like this, **with your Ubuntu\nuser name instead of \"appacademy\".**\n\n```shell\n-rw------- 1 appacademy appacademy 37 Mar 28 21:20 /home/appacademy/.pgpass\n```\n\nNow, try connecting to PostreSQL by typing `psql postgres`. Because you added\nthe alias to your startup script, and because you created your **.pgpass** file,\nit should now connect without prompting you for any credentials! Type `\\q` and\npress Enter to exit the PostgreSQL command line client.\n\n## Installing Postbird\n\nHead over to the [Postbird releases page on GitHub]. Click the installer for\nWindows which you can recognize because it's the only file in the list that ends\nwith \".exe\".\n\n![Download Postbird]\n\nAfter that installer downloads, run it. You will get a warning from Windows that\nthis is from an unidentified developer. If you don't want to install this, find\na PostgreSQL GUI client that you do trust and install it or do everything from\nthe command line.\n\n![Postbird installation warning]\n\nYou should get used to seeing this because many open-source applications aren't\nsigned with the Microsoft Store for monetary and philosophical reasons.\n\nOtherwise, if you trust Paxa like App Academy and tens of thousands of other\ndevelopers do, then click the link that reads \"More info\" and the \"Run anyway\"\nbutton.\n\n![Postbird run anyway]\n\nWhen it's done installing, it will launch itself. Test it out by typing the\n\"postgres\" into the \"Username\" field and the password from your installation in\nthe \"Password\" field. Click the Connect button. It should properly connect to\nthe running\n\nYou can close it for now. It also installed an icon on your desktop. You can\nlaunch it from there or your Start Menu at any time.\n\n## What you did\n\nYou installed and configured PosgreSQL 12, a relational database management\nsystem, and tools to use it! Well done!\n\n[Download PostgreSQL]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-SQL/assets/download-postgresql.png\n[Deselect pgAdmin 4 and Stack Builder components]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-SQL/assets/postgresql-installation-uncheck-components.png\n[Download Postbird]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-SQL/assets/download-postbird.png\n[Postbird installation warning]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-SQL/assets/postbird-installation-warning.png\n[Postbird run anyway]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-SQL/assets/postbird-installation-run-anyway.png\n[pgpass file]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-SQL/assets/windows-pgpass-configuration.png\n[Postbird releases page on GitHub]: https://github.com/Paxa/postbird/releases\n"
  },
  "success": true
}