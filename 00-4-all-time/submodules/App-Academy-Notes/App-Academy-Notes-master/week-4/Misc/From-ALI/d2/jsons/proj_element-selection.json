{
  "template": {
    "taskId": "91b8acb5-c151-4e96-840f-a3916dbd2131",
    "name": "Element Selection Project",
    "repo": "Modular-Curriculum",
    "path": "content/dom/topics/element-selection-placement/projects/my-profile/README.md",
    "type": "Project",
    "timeEstimate": 12600,
    "urls": [
      "element-selection-project"
    ],
    "topic": "Tuesday - Element Selection",
    "subtopic": "Practices",
    "download": "",
    "solution": "https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-DOM-API/element-selection/projects/my-profile-solution.zip",
    "body": "# DOM Project: Create a profile page with Javascript\n\nNow that you’ve learned about the DOM and how to access and manipulate it, put\nskills to use by building your own basic profile page! In this project, you\nwill:\n\n- Create an HTML file and link to a Javascript file\n- Use Javascript to create and update page elements\n- Add CSS classes with Javascript\n- Create a clock using the Date object\n\n## Introduction\n\nThe best way to learn is to create something that is meaningful or relevant to\nyou, so why not start by making a page all about yourself?\n\nIn this project, you’ll create a simple profile page that displays details about\nyou, such as who you are, what you like to do, and where you are located.\n\nPut as many or as few details as you like. Don’t worry, the government already\nknows where you live. It’s your page, so feel free to give it your own flair!\n\n## Project Overview\n\nYou’ve learned about the DOM, and now it’s time to put that knowledge into\npractice.\n\nIn this project, you’ll create a simple profile page and fill it with details\nabout yourself.\n\nYou could hard-code your content into your HTML file, but where’s the fun in\nthat? We’ll practice using Javascript to access DOM elements and insert content\ninto your page dynamically.\n\nWe’ll also go over how to add CSS class attributes to elements dynamically, so\nyou can add a bit of styling to your profile.\n\n## Phase 1: Setting up your HTML and Javascript files\n\nCreate an HTML file in a new project folder called `myProfile.html`. Set up your\nhtml file with a `head` and `body` section. Other than the appropriate HTML\ntags, leave the file empty of content, ids and classes.\n\nIn your HTML file, add a link to an external Javascript file in your project\ndirectory called `myProfile.js`. Test that your Javascript file is linked\ncorrectly by printing something you can read in the browser console. Example:\n\n```js\nconsole.log(“This is my profile page!”)\n```\n\n## Phase 2: Populating your profile\n\nAgain, don’t hard-code any content in your HTML file. Instead, construct the\npage content using your Javascript file.\n\nFirst, you should make sure all the DOM objects you need are loaded before you\nadd new things to the page. Add a `DOMContentLoaded` event listener in your\nJavascript file.\n\n```js\nwindow.addEventListener(\"DOMContentLoaded\", event => {\n  // Your Javascript goes here\n});\n```\n\n### Phase 2A: Creating and appending new elements\n\nIt’s time to add some content to your profile page! Insert your name as an `h1`\ninto the page using Javascript, and give it an `id`. _Hint: You may want to use\nthe following:_\n\n- `document.createElement()`\n- `Element.setAttribute()`\n- `document.createTextNode()`\n- `Node.appendChild()`\n\nAfter you’ve inserted the `h1`, open your HTML page in your browser and make\nsure the `h1` with your name appears on the page.\n\nYou’ve added your name to the page, but it still looks sparse. Fill out your\npage with some details about yourself by creating and appending new elements.\nUse what you’ve learned about manipulating the DOM to add to your Javascript\nfile.\n\n- Create a new unordered list element.\n- Append at least **four list items** of details about yourself to your list.\n- Append your list to the body of your page.\n\nBelow is an example list item:\n\n```js\nconst listItem1 = document.createElement(\"li\");\nconst listItem1Content = document.createTextNode(\n  \"I like to drink iced lattes.\"\n);\nlistItem1.appendChild(listItem1Content);\n// Append listItem1 to your unordered list here\n```\n\n### Phase 2B: Refactoring to make it programmatic\n\nThe code we wrote above works, but it is lengthy and leads to needless\nrepetition. Imagine we want to display 20 hobbies. Following the pattern above\nmeans we would have to create an element, create a text node, and append a child\nnode to the details list 20 times for each hobby. That’s 80 extra lines of code!\n\nLet's approach this differently and make the work easier for ourselves. Can we\nrefactor it to make inserting the `li` elements more programmatic and easily\nrepeatable? Yes, we can! First, let’s create the `ul` and append it to the body\nof our page, as we did in the last section.\n\n```js\n// Create the element with document.createElement()\n// Set the attribute with Element.setAttribute()\n// Append the element to the page with Node.appendChild()\n```\n\nNow, let’s add the list items. We can shorten the code up by creating an array\nthat stores all of the list items as string values, join all the string values\ninto a single string, and insert that string into the DOM.\n\n```js\nconst detailsArr = [\n  \"<li>I like to drink iced lattes.</li>\",\n  \"<li>I have two cats and eight kittens.</li>\",\n  \"<li>My favorite place to get lunch is Chipotle.</li>\",\n  \"<li>On the weekends, I play flag football.</li>\"\n];\nconst liString = detailsArr.join(\" \");\nconst listElement = document.getElementById(\"details\");\nlistElement.innerHTML = liString;\n```\n\nNotice that we used `innerHTML` here rather than `appendChild`. If we tried to\ninsert the string using `appendChild`, what would happen? Why? Refer to the MDN\ndocumentation on\n[Element.innerHTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)\nand\n[Node.appendChild](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)\nfor the answers.\n\nYou’ve cut down on the lines of code as well as made your code more readable!\nYou can easily add new list items inside your array and they’ll be automatically\nadded to your `ul` element. Now that you’ve refactored your code, can you add\nnew sections to your page?\n\n## Phase 3: Adding CSS classes and styles\n\nYou’ve added the details, but now they need some pizazz! Let’s add some CSS\nclasses to your elements that you can use to style the page. In your Javascript,\nadd a class named `my-details` to the unordered list you added in the last\nsection. You can use `Element.setAttribute` to set the class name to your `ul`.\nHere’s an example:\n\n```js\nconst myDetails = document.createElement(\"ul\");\nmyDetails.setAttribute(“class”, “my-details”);\n```\n\nNow that you know how to set an element’s class name, practice setting\nattributes by adding class names to the other elements you created.\n\n- Add a class name of `name` to the `h1` containing your name.\n- Add a class name of `detail` to each `li` element you created inside your\n  list.\n- Use `document.querySelectorAll` to access each `li`.\n- Use `forEach()` to iterate over the `li` list and add a class using\n  `Element.className`.\n\nCreate a CSS file and remember to link to it in your HTML file. In your CSS\nfile, add some styles using the classes we added to the `ul` and the `li`\nelements: `details` and `detail`. Update your CSS to:\n\n- Change the color of your `h1`\n- Add a border around your `ul`\n- Add padding to your list items\n\n```css\nh1.my-name {\n  color: green;\n  padding: 40px 20px;\n}\n\nul.my-details {\n  border: 1px solid gray;\n  padding: 40px;\n}\n\nli.detail {\n  list-style-type: square;\n  padding: 10px;\n}\n```\n\nFeel free to add more CSS styles beyond the ones above to your page to\npersonalize it!\n\n## Phase 4: Adding a clock with the Date object\n\nBy now, you should know how to add new elements to your page programmatically.\nLet’s kick it up a notch by adding a clock that keeps the current time onto your\nprofile page.\n\nObjectives:\n\n- Create a new element and add it to the body of your page\n- Use the Javascript Date object to get the current time\n- Insert the current time into a DOM element\n\nYou just created a live clock, and it’s _time_ for congratulations! (Har har.)\nCan you go the extra mile? Figure out how to insert your clock into a new list\nitem under your personal details that says “I live in City, State, and it’s\ncurrently `[CLOCK]` here.\n\n## Bonus: You’re so extra!\n\nCongratulations! You’ve created a basic profile page by manipulating the DOM and\ninserting elements dynamically with Javascript. But, why be _basic_ when you can\nbe a little _extra_? Make your profile extra shiny by adding more to your page.\n\n### Bonus A: Add more sections to your page\n\nUsing Javascript, create new elements and:\n\n- Insert an image into your profile under your name. _Hint:_ You could insert a\n  new `img`, or you could add a `div` and set the background image using a CSS\n  class.\n- Insert more sections to your profile. Examples: “Likes” list and “Dislikes”\n  list, “Favorite Restaurants”, “My Activities”, etc.\n\n### Bonus B: Use other Element methods\n\nCheck the MDN documentation for more\n[Element methods](https://developer.mozilla.org/en-US/docs/Web/API/Element) you\ncan use to manipulate the DOM. Try doing the following:\n\n- Use `.outerHTML` to replace an element.\n- Use the `classList` API to add/remove classes.\n- Try using : `Element.closest`, `getElementsByClassName`,\n  `getElementsByTagName` to select elements on your page.\n\n### Bonus C: Fire JS on different DOM events\n\nYou have used `DOMContentLoaded` to run Javascript on a DOM event. It is one of\nmany different DOM events that developers can use to trigger functionality.\n\nCheck out MDN`’s\n[Event Reference](https://developer.mozilla.org/en-US/docs/Web/Events)\ndocumentation to see how many different DOM events there are. Trying using a few\nof them in your code. Some relevant methods to use would be under:\n\n- Keyboard events\n- Mouse events\n- DOM mutation events\n\n### Bonus D: Make a countdown clock\n\nInstead of keeping the current time on your profile page, make a countdown clock\nto your birthday.\n\nRefer to the MDN documentation on the\n[Date object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)\nfor help with this task. Review how to calculate the elapsed time between two\ndates.\n"
  },
  "success": true
}