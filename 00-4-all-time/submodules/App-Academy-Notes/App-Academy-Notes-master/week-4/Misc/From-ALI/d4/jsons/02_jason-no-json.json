{
  "template": {
    "taskId": "e1e5666c-5872-4f9b-a8f7-f293ab38956c",
    "name": "Jason? No, JSON!",
    "repo": "Modular-Curriculum",
    "path": "content/dom/topics/json/readings/reading-json-js.md",
    "type": "Reading",
    "timeEstimate": 900,
    "urls": [
      "jason--no--json-"
    ],
    "topic": "Homework for Thursday",
    "subtopic": "Homework",
    "body": "# Jason? No, JSON!\n\n[Jason] is an ancient Greek mythological hero who went traipsing about the known\nworld looking for \"the golden fleece\".\n\n[JSON] is an open-standard file format that \"uses human-readable text to\ntransmit objects consisting of key-values pairs and array data types.\"\n\nWe're going to ignore [Jason] and focus solely on [JSON] for this reading so\nthat you can, by the end of it, know what [JSON] is and how to work with it.\n\n## JSON is a format!\n\nThis is the most important thing that you can get when reading this article. In\nthe same way that HTML is a format for hypertext documents, or DOCX is a format\nfor Microsoft Word documents, JSON is just a format for data. It's just text. It\ndoesn't \"run\" like JavaScript does. It is just text that contains data that both\nmachines and humans can understand. If you ever hear someone say \"a JSON\nobject\", then you can rest assured that phrase doesn't make any sense\nwhatsoever.\n\nJSON is just a string. It's just text.\n\nThat's so important, here it is, again, but in a fancy quote box.\n\n> JSON is just a string. It's just text.\n\n## Why all the confusion?\n\nThe problem is, JSON _looks_ a lot like JavaScript syntax. Heck, it's even named\n**JavaScript Object Notation**. That's likely because the guy who invented it,\n[Douglas Crockford], is an avid JavaScripter. He's the author of [JavaScript:\nThe Good Parts] and was the lead JavaScript Architect at Yahoo! back when Yahoo!\nwas a real company.\n\nAt that time, like in the late 1990s and early 2000s, there were a whole bunch\nof competing formats for how computers would send data between one another. The\nbig contender at the time is a format called XML, or the _eXtensible Markup\nLanguage_. It looks a lot like HTML, but has far stricter rules than HTML.\nDouglas didn't like XML because it took a lot of bytes to send the data (and\nthis was a pre-broadband/pre-3G world). Worse, XML is not a friendly format to\nread if you're human. So, he set out to come up with a new format based on the\nway JavaScript literals work.\n\n## \"Remind me about JavaScript literals...\"\n\nJust to refresh your memory, a _literal_ in JavaScript is a _value that you\nliterally just type in_. If you type `7` into a JavaScript file, when it runs,\nthe JavaScript interpreter will see that character `7` and say to itself, \"Hey\nself, the programmer literally typed the number seven so that must mean they\nwant the value 7.\"\n\nHere's a table of some literals that you may type into a program.\n\n| What you want to type                      | The JavaScript literal              |\n|--------------------------------------------|-------------------------------------|\n| The value that means \"true\"                | `true`                              |\n| The number of rows in this table           | `6`                                 |\n| A bad approximation of Ï€                   | `3.14`                              |\n| An array that contains some US state names | `[\"Ohio\", \"Iowa\"]`                  |\n| An object that represents Roberta          | `{ person: true, name: \"Roberta\" }` |\n\nBack to Douglas Crockford, inventor of [JSON]. Douglas thought to himself, _why\ncan't I create a format that has that simplicity so that I can write programs\nthat can send data to each other in that format?_ Turns out, he could, and he\ndid.\n\n## Boolean, numeric, and null values\n\nThe following table shows you what the a JavaScript literal is in the JSON\nformat. Notice that _everything_ in the JSON column is actually a string!\n\n| JavaScript literal value | JSON representation in a string |\n|--------------------------|---------------------------------|\n| `true`                   | `\"true\"`                        |\n| `false`                  | `\"false\"`                       |\n| `12.34`                  | `\"12.34\"`                       |\n| `null`                   | `\"null\"`                        |\n\n## String literals in JSON\n\nSay you have the following string in JavaScript.\n\n```js\n'this is \"text\"'\n```\n\nWhen that gets converted into the JSON format, you will see this:\n\n```json\n\"this is \\\"text\\\"\"\n```\n\nFirst, it's important to notice one thing: JSON always uses double quotes for\nstrings. Yep, that's worth repeating.\n\n> JSON always uses double-quotes to mark strings.\n\nNotice also that the quotation marks (\") are \"escaped\". When you write a string\nsurrounded by quotation-marks like \"escaped\", everything's fine. But, what\nhappens when your string needs to include a quotation mark?\n\n```js\n// This is a bad string with quotes in it\n\"Bob said, \"Well, this is interesting.\"\"\n```\n\nWhatever computer is looking at that string gets really confused because once it\nreads that first quotation mark it's looking for another quotation mark to show\nwhere the string ends. For computers, the above code looks like this to them.\n\n```js\n\"Bob said, \"                // That's a good string\nWell, this is interesting   // What is THIS JUNK????\n\"\"                          // That's a good string\n```\n\nYou need a way to indicate that the quotation marks around the phrase that Bob\nsays should belong _in_ the string, not as a way to show where the string starts\nor stops. The way that language designers originally addressed this was by\nsaying\n\n> If your quotation mark delimited string has a quotation mark in it, put a\n> backslash before the interior quotation mark.\n\nFollowing that rule, you would correctly write the previous string like this.\n\n```js\n\"Bob said, \\\"Well, this is interesting.\\\"\"\n```\n\nCheck out all of the so-called [JavaScript string escape sequences] over on\nMDN.\n\nWhat happens if you had text that spanned more than one line? JSON only allows\nstrings to be on one line, just like old JavaScript did. Let's say you just\nwrote an American sentence that you want to submit to a contest.\n\n```\nShe woke him up with\nher Ramones ringtone \"I Want\nto be Sedated\"\n```\n(from American Sentences by Paul E. Nelson)\n\nIf you want to format that in a string in JSON format, you have to escape the\nquotation marks _and_ the new lines! The above would look like this:\n\n```\nShe woke him up with\\nher Ramones ringtone \\\"I Want\\nto be Sedated\\\"\n```\n\nThe new lines are replaced with \"\\n\".\n\n## Array values\n\nThe way that JSON represents an array value is using the same literal notation\nas JavaScript, namely, the square brackets `[]`. With that in mind, can you answer the\nfollowing question before continuing?\n\n_What is the JSON representation of an array containing the numbers one, two,\nand three?_\n\nWell, in JavaScript, you would type `[1, 2, 3]`.\n\nIf you were going to type the corresponding JSON-formatted string that contains\nthe representation of the same array, you would type `\"[1, 2, 3]\"`. Yep, pretty\nmuch the same!\n\n## Object values\n\nEarlier, you saw that example of an object that represents Roberta as\n\n```js\n{ person: true, name: \"Roberta\" }\n```\n\nThe main difference between objects in JavaScript and JSON is that the keys in\nJSON _must_ be surrounded in quotation marks. That means the above, in a JSON\nformatted string, would be:\n\n```js\n\"{ \\\"person\\\": true, \\\"name\\\": \\\"Roberta\\\" }\"\n```\n\n## Some terminology\n\nWhen you have some data and you want to turn it into a string (or some other\nkind of value like \"binary\") so your program can send it to another computer,\nthat is the process of **serialization**.\n\nWhen you take some text (or something another computer has sent to your program)\nand turn it into data, that is the process of **deserialization**.\n\n## Using the built-in JSON object\n\nIn modern JavaScript interpreters, there is a `JSON` object that has two methods\non it that allows you to convert JSON-formatted strings into JavaScript objects\nand JavaScript object into JSON-formatted strings. They are:\n\n* `JSON.stringify(value)` will turn the value passed into it into a string.\n* `JSON.parse(str)` will turn a JSON-formatted string into a JavaScript object.\n\nSo, it shouldn't come as much of a surprise how the following works.\n\n```js\nconst array = [1, 'hello, \"world\"', 3.14, { id: 17 }];\nconsole.log(JSON.stringify(array));\n// prints [1, \"hello, \\\"world\\\"\", 3.14, {\"id\":17}]\n```\n\nIt shouldn't surprise you that it works in the opposite direction, too.\n\n```js\nconst str = '[1,\"hello, \\\\\"world\\\\\"\",3.14,{\"id\":17}]';\nconsole.log(JSON.parse(str));\n// prints an array with the following entries:\n//   0: 1\n//   1: \"hello, \\\"world\\\"\"\n//   2: 3.14\n//   3: { id: 17 }\n```\n\nYou may ask yourself, \"What's up with that double backslash thing going on in\nthe JSON representation?\". It has to do with that escaping thing. When\nJavaScript reads the string the first time to turn it into a `String` object in\nmemory, it will escape the backslashes. Then, when `JSON.parse` reads it, it\nwill still need backslashes in the string. This is all really confusing, escaped\nstrings and double backslashes. There's an easy solution for that.\n\n## You will almost never write raw JSON\n\nYep. But, you do need to be able to recognize it and read it. What you'll likely\nend up doing in your coding is creating values and using `JSON.stringify` to\ncreate JSON-formatted strings that represent those values. Or, you'll end up\ncalling a data service which will return JSON-formatted content to your code\nwhich you will then use `JSON.parse` on to convert the string into a JavaScript\nobject.\n\n## Brain teaser\n\nNow that you know JSON is a format for data and is just text, what will the\nfollowing print?\n\n```js\nconst a = [1, 2, 3, 4, 5];\nconsole.log(a[0]);\n\nconst s = JSON.stringify(a);\nconsole.log(s[0]);\n\nconst v = JSON.parse(s);\nconsole.log(v[0]);\n```\n\n## What you just learned\n\nWith some more practiced, of course, you will be able to do all of these really\nwell. However, right now, you should be able to\n\n1. Identify and generate valid JSON-formatted strings\n2. Use `JSON.parse` to deserialize JSON-formatted strings\n3. Use `JSON.stringify` to serialize JavaScript objects\n4. Correctly identify the definition of \"deserialize\"\n5. Correctly identify the definition of \"serialize\"\n\n[Jason]: https://en.wikipedia.org/wiki/Jason\n[JSON]: https://en.wikipedia.org/wiki/JSON\n[Douglas Crockford]: https://www.crockford.com/add.html\n[JavaScript: The Good Parts]: https://isbndb.com/book/9780596517748\n[JavaScript string escape sequences]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Escape_notation\n"
  },
  "success": true
}