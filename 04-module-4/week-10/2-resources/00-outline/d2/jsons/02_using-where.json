{
  "template": {
    "taskId": "a256fb4b-35e0-45a7-a4e4-7542cda4cd51",
    "name": "Using WHERE",
    "repo": "Modular-Curriculum",
    "path": "content/relational-databases/topics/sql/readings/reading-07-where-and-common-operators-sql.md",
    "type": "Reading",
    "timeEstimate": 1800,
    "urls": [
      "using-where"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# Selecting Table Rows Using WHERE And Common Operators\n\nIn the last reading, we learned how to create a simple SQL query using SELECT.\nIn this reading, we'll be adding a [WHERE clause][1] to our SELECT statement to\nfurther filter a database table and get specific rows back.\n\n## Using SELECT and WHERE\n\nPreviously, we covered how to use SELECT queries to fetch all of a table's rows\nor specified table rows by column(s). We can filter information returned by our query by using a WHERE clause in our SELECT statement.\n\nLet's look at some examples of adding a WHERE clause using our `puppies` table\nfrom before:\n\n| name     | age_yrs | breed               | weight_lbs | microchipped |\n|----------|---------|---------------------|------------|--------------|\n| Cooper   | 1       | Miniature Schnauzer | 18         | yes          |\n| Indie    | 0.5     | Yorkshire Terrier   | 13         | yes          |\n| Kota     | 0.7     | Australian Shepherd | 26         | no           |\n| Zoe      | 0.8     | Korean Jindo        | 32         | yes          |\n| Charley  | 1.5     | Basset Hound        | 25         | no           |\n| Ladybird | 0.6     | Labradoodle         | 20         | yes          |\n| Callie   | 0.9     | Corgi               | 16         | no           |\n| Jaxson   | 0.4     | Beagle              | 19         | yes          |\n| Leinni   | 1       | Miniature Schnauzer | 25         | yes          |\n| Max      | 1.6     | German Shepherd     | 65         | no           |\n\n### WHERE clause for a single value\n\nThe simplest WHERE clause finds a row by a single column value. See the example\nbelow, which finds the rows where the breed equals 'Corgi':\n\n```shell\nSELECT name, breed FROM puppies\n  WHERE breed = 'Corgi';\n```\n\n`SELECT`, `FROM`, and `WHERE` are capitalized. Notice that the string must use\nsingle quotation marks. _Note: PostgreSQL converts all names of tables, columns,\nfunctions, etc. to lowercase unless they're double quoted._ For example:\n`create table Foo()` will create a table called `foo`, and `create table\n\"Bar\"()` will create a table called `Bar`. If you use double quotation marks in\nthe query above, you'll get an error that says `column \"Corgi\" does not exist`\nbecause it thinks you're searching for the capitalized column name `Corgi`.\n\nUse the command `psql -U postgres` in the terminal, and type in your 'postgres'\nuser password to connect to the PostgreSQL server. You should have a puppies\ntable in your postgres database from the last reading. Once you're in psql,\nenter the query above into the terminal and press Enter. You should get back one\nresult for Callie the Corgi.\n\n```shell\n  name  | breed\n--------+-------\n Callie | Corgi\n```\n\n### WHERE clause for a list of values\n\nWe can also add a WHERE clause to check for a list of values. The syntax is\n`WHERE [column] IN ('value1', 'value2', 'value3')`. Let's say we wanted to find\nthe name and breed of the puppies who are Corgis, Beagles, or Yorkshire\nTerriers. We could do so with the query below:\n\n```shell\nSELECT name, breed FROM puppies\n  WHERE breed IN ('Corgi', 'Beagle', 'Yorkshire Terrier');\n```\n\nEntering this query into psql should yield the following results:\n\n```shell\n  name  |       breed\n--------+-------------------\n Indie  | Yorkshire Terrier\n Callie | Corgi\n Jaxson | Beagle\n ```\n\n### WHERE clause for a range of values\n\nIn addition to checking for string values, we can use the WHERE clause to check\nfor a range of numeric/integer values. This time, let's find the name, breed,\nand age of the puppies who are between 0 to 6 months old.\n\n```shell\nSELECT name, breed, age_yrs FROM puppies\n  WHERE age_yrs BETWEEN 0 AND 0.6;\n```\n\nEntering this query into psql should yield the following results:\n\n```shell\n   name   |       breed       | age_yrs\n----------+-------------------+---------\n Indie    | Yorkshire Terrier |     0.5\n Ladybird | Labradoodle       |     0.6\n Jaxson   | Beagle            |     0.4\n```\n\n## ORDER BY\n\nGetting the values back from a database in any order it wants to give them to\nyou is ludicrous. Instead, you will often want to specify the order in which\nyou get them back. Say you wanted them in alphabetical order by their name.\nThen, you would write\n\n```sql\nSELECT name, breed\nFROM puppies\nORDER BY name;\n```\n\nSay you wanted that returned from oldest dog to youngest dog. You would write\n\n```sql\nSELECT name, breed\nFROM puppies\nORDER BY age_yrs DESC;\n```\n\nwhere `DESC` means in descending order. Note that the column that you order on\ndoes not have to appear in the column list of the `SELECT` statement.\n\n## LIMIT and OFFSET\n\nSay your query would return one million rows because you've cataloged every\npuppy in the world. That would be a lot for any application to handle. Instead,\nyou may want to limit the number of rows returned. You can do that with the\n`LIMIT` keyword.\n\n```sql\nSELECT name, breed\nFROM puppies\nORDER BY age_yrs\nLIMIT 100;\n```\n\nThat would return the name and breed of the 100 youngest puppies. (Why?) That\nis, of the million rows that the statement would find, it _limits_ the number to\nonly 100.\n\nLet's say you want to see the _next_ 100 puppies after the first hundred. You\ncan do that with the `OFFSET` keyword which comes after the `LIMIT` clause.\n\n```sql\nSELECT name, breed\nFROM puppies\nORDER BY age_yrs\nLIMIT 100 OFFSET 100;\n```\n\nThat will return only rows 101 - 200 of the result set. It _limits_ the total\nnumber of records to return to 100. Then, it starts at the 100th row and counts\n100 records. Those are the records returned.\n\n## SQL operators\n\nA SQL operator is a word or character that is used inside a WHERE clause to\nperform comparisons or arithmetic operations. In the three examples above, we\nused SQL operators inside of WHERE clauses to filter table rows -- `=`, `IN`,\n`BETWEEN`, and `AND`.\n\nThe following is a listing of SQL operators. We can combine any of these\noperators in our query or use a single operator by itself.\n\n### Logical operators\n\n| Operator | Description                                                   |\n|----------|---------------------------------------------------------------|\n| ALL      | TRUE if all of the subquery values meet the condition.        |\n| AND      | TRUE if all the conditions separated by AND are TRUE.         |\n| ANY      | TRUE if any of the subquery values meet the condition.        |\n| BETWEEN  | TRUE if the operand is within the range of comparisons.       |\n| EXISTS   | TRUE if the subquery returns one or more records.             |\n| IN       | TRUE if the operand is equal to one of a list of expressions. |\n| LIKE     | TRUE if the operand matches a pattern (accepts \"wildcards\").  |\n| NOT      | Displays a record if the condition(s) is NOT TRUE.            |\n| OR       | TRUE if any of the conditions separated by OR is TRUE.        |\n| SOME     | TRUE if any of the subquery values meet the condition.        |\n\nHere is another example query with a WHERE clause using several logical\noperators: `NOT`, `IN`, `AND`, and `LIKE`.\n\n```shell\nSELECT name, breed FROM puppies\n  WHERE breed NOT IN ('Miniature Schnauzer', 'Basset Hound', 'Labradoodle')\n    AND breed NOT LIKE '%Shepherd';\n```\n\n**Note**: Pay attention to that `LIKE` operator. You will use it more than you\nwant to. The wildcard it uses is the percent sign. Here's a table to help you\nunderstand.\n\n| `LIKE`    | Matches \"dog\" | Matches \"hotdog\" | Matches \"dog-tired\" | Matches \"ordogordo\" |\n|-----------|---------------|------------------|---------------------|---------------------|\n| `'dog'`   | yes           | no               | no                  | no                  |\n| `'%dog'`  | yes           | yes              | no                  | no                  |\n| `'dog%'`  | yes           | no               | yes                 | no                  |\n| `'%dog%'` | yes           | yes              | yes                 | yes                 |\n\nEntering this query into psql should yield the following results:\n\n```shell\n  name  |       breed\n--------+-------------------\n Indie  | Yorkshire Terrier\n Zoe    | Korean Jindo\n Callie | Corgi\n Jaxson | Beagle\n```\n\nWith the query above, we filtered out six puppies: two Miniature Schnauzers, one\nBasset Hound, one Labradoodle, and two Shepherds. We started with ten puppies in\nthe table, so we're left with four table rows. There are two puppies who are\nShepherd breeds: an Australian Shepherd and a German Shepherd. We used the\n`LIKE` operator to filter these. In `'%Shepherd`, the `%` matches any substring\nvalue before the substring 'Shepherd'.\n\n### Arithmetic operators\n\n| Operator | Meaning                     | Syntax |\n|----------|-----------------------------|--------|\n| +        | Addition                    | a + b  |\n| -        | Subtraction                 | a - b  |\n| *        | Multiplication              | a * b  |\n| /        | Division                    | a / b  |\n| %        | Modulus (returns remainder) | a % b  |\n\nHere is an example query with a WHERE clause using the multiplication operator\nto find puppies that are 6 months old:\n\n```shell\nSELECT name, breed, age_yrs FROM puppies\n  WHERE age_yrs * 10 = 6;\n```\n\nEntering the above query into psql will yield one result:\n\n```shell\n   name   |    breed    | age_yrs\n----------+-------------+---------\n Ladybird | Labradoodle |     0.6\n```\n\n### Comparison operators\n\n| Operator | Meaning                  | Syntax |\n|----------|--------------------------|--------|\n| =        | Equals                   | a = b  |\n| !=       | Not equal to             | a != b |\n| <>       | Not equal to             | a <> b |\n| >        | Greater than             | a > b  |\n| <        | Less than                | a < b  |\n| >=       | Greater than or equal to | a >= b |\n| <=       | Less than or equal to    | a <= b |\n| !<       | Not less than            | a !< b |\n| !>       | Not greater than         | a !> b |\n\nHere is an example query with a WHERE clause using the `>` comparison operator:\n\n```shell\nSELECT name, breed, weight_lbs FROM puppies\n  WHERE weight_lbs > 50;\n```\n\nEntering the above query into psql will yield one result:\n\n```shell\n name |      breed      | weight_lbs\n------+-----------------+------------\n Max  | German Shepherd |         65\n ```\n\n## What we learned:\n\n* How to use a WHERE clause in a SELECT query\n* How to construct WHERE clauses matching a single value, a list of values, and\n  a range of values\n* What SQL operators are\n* How to use logical operators, arithmetic operators, and comparison operators\n\n[1]: http://www.postgresqltutorial.com/postgresql-where/\n"
  },
  "success": true
}