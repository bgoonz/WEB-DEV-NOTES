{
  "template": {
    "taskId": "a55f4c4e-92b0-42b0-afc2-6f11593009c1",
    "name": "The Bubbling Principle",
    "repo": "Modular-Curriculum",
    "path": "content/dom/topics/event-handling/readings/reading-6-the-bubbling-principle-js.md",
    "type": "Reading",
    "timeEstimate": 540,
    "urls": [
      "the-bubbling-principle"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "# Event Handling: The Bubbling Principle\n\nBubbles are little pockets of air that make for an amusing time in the bath.\nSometimes, though, bubbles can be annoying -- like when they suddenly pop, or\nwhen there are too many and they’re overflowing! We can think about Javascript\nevents and their handlers as bubbles that rise up through the murky waters of\nthe DOM until they reach the surface, or the top-level DOM element.\n\nIt’s important for developers to understand The Bubbling Principle and use it to\nproperly handle events and/or to stop events from bubbling up to outer elements\nand causing unintended effects.\n\n## What is the bubbling principle?\n\nAccording to [this handy bubbling explainer][1] on Javascript.info, The Bubbling\nPrinciple means that _when an event happens on an element, it first runs the\nhandlers on it, then on its parent, then all the way up on other ancestors._\nConsider the following example HTML.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"text/javascript\">\n      window.addEventListener(\"DOMContentLoaded\", event => {\n        document.body.addEventListener(\"click\", event => {\n          console.log(event.target.id);\n        });\n      });\n    </script>\n  </head>\n  <body>\n    <div onclick=\"console.log('The onclick handler!')\">\n      <p id=\"paragraph\">\n        If you click on this P, the onclick event for the DIV actually runs.\n      </p>\n    </div>\n  </body>\n</html>\n```\n\nIn the `<script>`, you can see the event listener for `DOMContentLoaded`, and\ninside it, another listener for a `click` event on the `<body>` element of the\ndocument accessed through the special property `document.body`. (You could also\nuse `document.querySelector('body')`, too.) By now, we should be used to\nlistening for click events in our scripts. However, there's another way to run a\nfunction on a `click` event as an attribute of the `div` in the body of the\nHTML, a way that **you should never ever ever use in real production code**!\n\nCheck out that `onclick` attribute with some JavaScript code to print out a\nmessage about the so-called onclick handler. For almost ever event type like\n`click` or `change` or `keypress`, you can put an attribute by prefixing the\nevent name with the word \"on\". However, **you should never ever ever use that in\nreal production code**!\n\nSave the above HTML in a file, and run that file in a browser. Open up the\nbrowser console (_right-click -> Inspect -> Console_), click on the `<p>`\nelement, and observe what happens. The message \"The onclick handler\" should\nappear, then you should see the id `paragraph` printed to the console.\n\nWhat happened here? The `console.log` shows that an event happened on the `<p>`\n(i.e. the `event.target`), and yet the `onclick` handler on the `<div>` also\nfired -- meaning that the click event on the `<p>` bubbled up to the `<div>` and\nfired its `onclick` event!\n\nOnce again, here's the deal:\n\n> Don't ever use the `on`-event-name attribute version of an event handler.\n> Instead, always use the `addEventListener` method of the DOM object that you\n> get from something like `document.getElementById` or `document.querySelector`.\n\n## An event bubbling example\n\nTo visualize event bubbling, it might be helpful to watch this short and fun\nYouTube video on _bubbles inside bubbles inside bubbles_.\n\n[Bubble Inside a Bubble Video][3]\n\nWe can think of events that happen on nested DOM elements as these nested\nbubbles. An event that happens on the innermost element bubbles up to its parent\nelement, and that parent’s parent element, and so on up the chain. Let’s look at\nanother example that demonstrates bubbling.\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html>\n  <body>\n    <main>\n      <div>\n        <p>This is a paragraph in a div in a main in a body in an html</p>\n      </div>\n    </main>\n\n    <script>\n      function handler(e) {\n        console.log(e.currentTarget.tagName);\n      }\n      document.querySelector('main').addEventListener('click', handler);\n      document.querySelector('div').addEventListener('click', handler);\n      document.querySelector('p').addEventListener('click', handler);\n    </script>\n  </body>\n</html>\n```\n\nIf you save this HTML file, open it in a browser, and click on the `<p>`, three\ndifferent messages should appear in the console: first “P”, second “DIV”, and\nthird “MAIN”. The click event bubbled upwards from the `<p>` element to the\n`<div>` and finally to the `<main>`.\n\nWe could think of this succession of events as bubbles popping. The innermost\nbubble (the `<p>` element) _popped_ (i.e. displayed an alert), which caused its\nparent’s bubble to pop, which caused its parent’s bubble to pop. Since there\naren’t any `onclick` handlers above the `<main>` nothing else happens on the\npage, but the bubbles would travel all the way up the DOM until they reached the\ntop (`<html>`) looking for event handlers to run.\n\n## Stopping event bubbling with stopPropagation()\n\nAs stated in the introduction, event bubbling can cause annoying side effects.\nThis MDN doc on [Event bubbling and capture][4] explains what would happen if a\nuser clicked on a `<video>` element that has a parent `<div>` with a show/hide\ntoggle effect. On a click, the video would disappear along with its parent div!\n\nHow can you stop this unintended behavior from occurring? The answer is with the\n[event.stopPropagation()][5] method which stops the bubbling from continuing up\nthe parent chain. Here’s what it would look like on the `<video>` element:\n\n**Javascript**\n\n```js\ndocument\n  .querySelector('video')\n  .addEventListener('click', event => {\n    event.stopPropagation();\n    video.play();\n  });\n```\n\n## Event delegation\n\nWhile event bubbling can sometimes be annoying, it can also be helpful. The\nbubbling effect allows us to make use of **event delegation**, which means\nthat we can delegate events to a single element/handler -- a parent element that\nwill handle all events on its children elements.\n\nSay you had an unordered list (`<ul>`) element filled with several list item\n(`<li>`) elements, and you want to listen for click events on each list item.\nInstead of attaching a click event listener on each and every list item, you\ncould conveniently attach it to the parent unordered list, like so:\n\n**HTML**\n\n```html\n<ul id=\"my-list\">\n  <li>This is list item 1.</li>\n  <li>This is list item 2.</li>\n  <li>This is list item 3.</li>\n  <li>This is list item 4.</li>\n  <li>This is list item 5.</li>\n</ul>\n<script>\n  document\n    .getElementById('my-list')\n    .addEventListener('click', e => {\n       // will print out \"This is list item X\"\n       // depending on which list item is clicked\n      console.log(e.target.innerHTML);\n\n      // always prints \"my-list\"\n      console.log(e.currentTarget.id);\n    });\n</script>\n```\n\nThis example is a lot like the first example you saw with the `<p>` inside of a\n`<div>`, where the click on the `<p>` bubbled up to the `<div>`. In the above\nexample, a click on any `<li>` will bubble up to its parent, the `<ul>`.\n\nWhen clicked on, a single `<li>` element becomes the [event.target][7] -- the\nobject that dispatched the event. The `<ul>` element is the\n[event.currentTarget][8] -- the element to which the event handler has been\nattached.\n\nNow that you know how to handle events responsibly, go frolic in the bubbles!\n\n## What we learned:\n\n- The definition of The Bubbling Principle\n- Examples of event bubbling\n- How to stop events from bubbling\n- How to use bubbling for event delegation\n\n[1]: https://javascript.info/bubbling-and-capturing\n[2]: https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers\n[3]: https://www.youtube.com/watch?v=OntX1115Tw4\n[4]: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture\n[5]: https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation\n[6]: https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation\n[7]: https://developer.mozilla.org/en-US/docs/Web/API/Event/target\n[8]: https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n"
  },
  "success": true
}