{
  "template": {
    "taskId": "a8f8fd12-5826-4daf-af85-2ff04683dffe",
    "name": "Cookies and Web Storage",
    "repo": "Modular-Curriculum",
    "path": "content/dom/topics/browser-basics/readings/reading-cookies-web-storage-js.md",
    "type": "Reading",
    "timeEstimate": 480,
    "urls": [
      "cookies-and-web-storage"
    ],
    "topic": "Homework for Thursday",
    "subtopic": "Homework",
    "body": "# Cookies and Web Storage\n\nAs we’ve learned in previous sections, most data on the Web is stored in a\ndatabase on a server, and we use the browser to retrieve this data. However,\nsometimes data is stored locally for the purposes of persisting throughout an\nentire session or until a specified expiration date.\n\nIn this reading, we’ll go over using **cookies** to store data versus using the\n**Web Storage API** and the use cases for each storage method.\n\n## Cookies\n\nCookies have been around forever, and they are still a widely used method to\nstore information about a site’s users.\n\n**What is a cookie?**\n\nA cookie is a small file stored on a user’s computer that holds a bite-sized\namount of data, under 4KB. Cookies are included with HTTP requests. The server\nsends the data to a browser, where it's typically stored and then sent back to\nthe server on the next request.\n\n**What are cookies used for?**\n\nCookies are used to store stateful information about a user, such as their\npersonal information, their browser habits or history, or form input information\nthey have filled out. A common use case for cookies is storing a _session\ncookie_ on user login/validation. Session cookies are lost once the browser\nwindow is closed. To make sure the cookie persists beyond the end of the\nsession, you could set up a _persistent cookie_ with a specified expiration\ndate. A use case for a persistent cookie is an e-commerce website that tracks a\nuser’s browsing or buying habits.\n\n**How to create a cookie in Javascript:**\n\nAs we've previously covered, the `document` interface represents the web page\nloaded in a user's browser. Since cookies are stored on a user's browser, it\nmakes sense that the `document` object also allows us to get/set cookies on a\nuser's browser:\n\n```js\nconst firstCookie = \"favoriteCat=million\";\ndocument.cookie = firstCookie;\nconst secondCookie = \"favoriteDog=bambi\";\ndocument.cookie = secondCookie;\ndocument.cookie; // Returns \"favoriteCat=million; favoriteDog=bambi\"\n```\n\nUsing the following syntax will create a new cookie:\n\n```js\ndocument.cookie = aNewCookieHere;\n```\n\nIf you want to set a second cookie, you would assign a new key value pair using\nthe same syntax a second time. Make sure to set the cookie to a string formatted\nlike a key-value pair:\n\n```js\nconst firstCookie = \"favoriteCat=million\";\ndocument.cookie = firstCookie;\ndocument.cookie; // Returns \"favoriteCat=million\"\n```\n\nFormatting your string like we do in the `firstCookie` variable above sets the\ncookie `value` with a defined key, known as the cookie's `name`, instead of an\nempty `name`. Refer to the MDN docs on [Document.cookie][1] for more examples.\n\nYou can view all the cookies a website is storing about you by using the\nDeveloper Tools. On **Google Chrome**, see the **Application tab**, and on\n**Firefox**, see the **Storage tab**.\n\n**Deleting a cookie:**\n\nWe can delete our own cookies using JavaScript by setting a cookie's expiration\ndate to a date in the past, causing them to expire:\n\n```js\nconst firstCookie = \"favoriteCat=million\";\ndocument.cookie = firstCookie;\ndocument.cookie; // Returns \"favoriteCat=million\"\n\n// specify the cookies \"name\" (the key) with an \"=\" and set the  expiration\n// date to the past\ndocument.cookie = \"favoriteCat=; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\ndocument.cookie; // \"\"\n```\n\nWe can also delete cookies using the Developer Tools!\n\nNavigate to a website, such as Amazon, and add an item to your cart. Open up the\nDeveloper Tools in your browser and delete all the cookies. In Chrome, you can\ndelete cookies by highlighting a cookie and clicking the delete button. In\nFirefox, you can right-click and delete a cookie. If you’ve deleted all the\ncookies in your Amazon cart, and you refresh the page, you should notice your\ncart is now empty.\n\n## Web Storage API\n\nCookies used to be the only way to store data in the browser, but with HTML5\ndevelopers gained access to the [Web Storage API][2], which includes\n**localStorage** and **Session Storage**. Here are the differences between the\ntwo, according to MDN:\n\n`sessionStorage`:\n\n- Stores data only for a _session_, or until the browser window or tab is closed\n- Never transfers data to the server\n- Has a storage limit of 5MB (much larger than a cookie)\n\nThe following [example from MDN][3] shows how we can use sessionStorage to\nautosave the contents of a text field and restore the contents of that text\nfield if the browser is accidentally refreshed.\n\n```js\n// Get the text field that we're going to track\nlet field = document.getElementById(\"field\");\n\n// See if we have an autosave value\n// (this will only happen if the page is accidentally refreshed)\nif (sessionStorage.getItem(\"autosave\")) {\n  // Restore the contents of the text field\n  field.value = sessionStorage.getItem(\"autosave\");\n}\n\n// Listen for changes in the text field\nfield.addEventListener(\"change\", function () {\n  // And save the results into the session storage object\n  sessionStorage.setItem(\"autosave\", field.value);\n});\n```\n\n`localStorage`:\n\n- Stores data with no expiration date and is deleted when clearing the browser\n  cache\n- Has the maximum storage limit in the browser (much larger than a cookie)\n\nLike with `sessionStorage`, we can use the `getItem()` and `setItem()` methods\nto retrieve and set `localStorage` data. The following [example from MDN][4]\nwill:\n\n- Check whether `localStorage` contains a data item called `bgcolor` using\n  `getItem()`.\n- If `localStorage` contains `bgcolor`, run a function called `setStyles()` that\n  grabs the data items using `Storage.getItem()` and use those values to update\n  page styles.\n- If it doesn't, run a function called `populateStorage()`, which uses\n  `Storage.setItem()` to set the item values, then run `setStyles()`.\n\n```js\nif (!localStorage.getItem(\"bgcolor\")) {\n  populateStorage();\n}\nsetStyles();\n\nconst populateStorage = () => {\n  localStorage.setItem(\"bgcolor\", document.getElementById(\"bgcolor\").value);\n  localStorage.setItem(\"font\", document.getElementById(\"font\").value);\n  localStorage.setItem(\"image\", document.getElementById(\"image\").value);\n};\n\nconst setStyles = () => {\n  var currentColor = localStorage.getItem(\"bgcolor\");\n  var currentFont = localStorage.getItem(\"font\");\n  var currentImage = localStorage.getItem(\"image\");\n\n  document.getElementById(\"bgcolor\").value = currentColor;\n  document.getElementById(\"font\").value = currentFont;\n  document.getElementById(\"image\").value = currentImage;\n\n  htmlElem.style.backgroundColor = \"#\" + currentColor;\n  pElem.style.fontFamily = currentFont;\n  imgElem.setAttribute(\"src\", currentImage);\n};\n```\n\n**When would we use the Web Storage API?**\n\nSince web storage can store more data than cookies, it’s ideal for storing\nmultiple key-value pairs. Like with cookies, this data can be saved only as a\nstring. With localStorage, the data is stored locally on a user’s machine,\nmeaning that it can only be accessed client-side. This differs from cookies\nwhich can be read both server-side and client-side.\n\nThere are a few common use cases for Web storage. One is storing information\nabout a shopping cart and the products in a user’s cart. Another is saving input\ndata on forms. You could also use Web storage to store information about the\nuser, such as their preferences or their buying habits. While we would normally\nuse a cookie to store a user’s ID or a session ID after login, we could use\nlocalStorage to store extra information about the user.\n\nYou can view what’s in local or session storage by using the Developer Tools. On\n**Google Chrome**, see the **Application tab**, and on **Firefox**, see the\n**Storage tab**.\n\n## What we learned:\n\n- What cookies are and when to use them\n- Differences between cookies and localStorage\n- Use cases for cookies and localStorage\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\n[3]: https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\n[4]: https://developer.mozilla.org/en-US/docs/Web/API/Storage\n"
  },
  "success": true
}