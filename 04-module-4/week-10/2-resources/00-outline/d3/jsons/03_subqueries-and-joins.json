{
  "template": {
    "taskId": "6200cf31-786c-4e2f-bbcf-f102b5299f09",
    "name": "Subqueries and JOINs",
    "repo": "Modular-Curriculum",
    "path": "content/relational-databases/topics/sql/readings/reading-13-joins-and-subqueries-sql.md",
    "type": "Reading",
    "timeEstimate": 1800,
    "urls": [
      "subqueries-and-joins"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "# Joins vs. Subqueries\n\nTo select, or not to select? That is the query. We’ve barely scratched the\nsurface of SQL queries. Previously, we went over how to write simple SQL\nqueries using the `SELECT` statement, and we learned how to incorporate a `WHERE` clause into our queries.\n\nThere’s a lot more we could add to our queries to get more refined results. In\nthis reading, we’ll go over joins and subqueries and talk about when we would\nuse one over the other.\n\n## What is a JOIN?\n\nWe briefly looked at the `JOIN` operation after we created foreign keys in a\nprevious reading. The [JOIN operation][1] allows us to retrieve rows from\nmultiple tables.\n\nTo review, we had two tables: a \"breeds\" table and a \"puppies\" table. The two\ntables shared information through a foreign key. The foreign key `breed_id`\nlives on the \"puppies\" table and is related to the primary key `id` of the\n\"breeds\" table.\n\nWe wrote the following `INNER JOIN` operation to get only the rows from the\n“puppies” table with a matching `breed_id` in the “friends” table:\n\n```sql\nSELECT * FROM puppies\nINNER JOIN breeds ON (puppies.breed_id = breeds.id);\n```\n\n[INNER JOIN][2] can be represented as a Venn Diagram, which produces rows from\nTable A that match some information in Table B.\n\n![orders-erd-many-to-many.svg]\n\nWe got the following table rows back from our `INNER JOIN` on the \"puppies\"\ntable. These rows represent the center overlapping area of the two circles. We\ncan see that the data from \"puppies\" appears first, followed by the joined data\nfrom the \"friends\" table.\n\n```sql\n id |   name   | age_yrs | breed_id | weight_lbs | microchipped | id |        name\n----+----------+---------+----------+------------+--------------+----+---------------------\n  1 | Cooper   |     1.0 |        8 |         18 | t            |  8 | Miniature Schnauzer\n  2 | Indie    |     0.5 |        9 |         13 | t            |  9 | Yorkshire Terrier\n  3 | Kota     |     0.7 |        1 |         26 | f            |  1 | Australian Shepherd\n  4 | Zoe      |     0.8 |        6 |         32 | t            |  6 | Korean Jindo\n  5 | Charley  |     1.5 |        2 |         25 | f            |  2 | Basset Hound\n  6 | Ladybird |     0.6 |        7 |         20 | t            |  7 | Labradoodle\n  7 | Callie   |     0.9 |        4 |         16 | f            |  4 | Corgi\n  8 | Jaxson   |     0.4 |        3 |         19 | t            |  3 | Beagle\n  9 | Leinni   |     1.0 |        8 |         25 | t            |  8 | Miniature Schnauzer\n 10 | Max      |     1.6 |        5 |         65 | f            |  5 | German Shepherd\n```\n\nThere are different types of `JOIN` operations. The ones you'll use most often are:\n\n1. **Inner Join** -- Returns a result set containing rows in the left table that\n   match rows in the right table.\n2. **Left Join** --  Returns a result set containing all rows from the left\n   table with the matching rows from the right table. If there is no match, the\n   right side will have null values.\n3. **Right Join** -- Returns a result set containing all rows from the right\n   table with matching rows from the left table. If there is no match, the left\n   side will have null values.\n4. **Full Outer Join** -- Returns a result set containing all rows from both the\n   left and right tables, with the matching rows from both sides where\n   available. If there is no match, the missing side contains null values.\n5. **Self-Join** -- A self-join is a query in which a table is joined to itself.\n   Self-joins are useful for comparing values in a column of rows within the\n   same table.\n\n(_See this tutorial doc on [PostgreSQL Joins][3] for more information on the\ndifferent `JOIN` operations._)\n\n## What is a subquery?\n\nA subquery is essentially a `SELECT` statement nested inside another `SELECT`\nstatement. A subquery can return a single (“scalar”) value or multiple rows.\n\n### Single-value subquery\n\nLet’s see an example of how to use a subquery to return a single value. Take\nthe \"puppies\" table from before. We had a column called `age_yrs` in that table\n(see below).\n\n```sql\npostgres=# SELECT * FROM puppies;\n id |   name   | age_yrs | breed_id | weight_lbs | microchipped\n----+----------+---------+----------+------------+--------------\n  1 | Cooper   |     1.0 |        8 |         18 | t\n  2 | Indie    |     0.5 |        9 |         13 | t\n  3 | Kota     |     0.7 |        1 |         26 | f\n  4 | Zoe      |     0.8 |        6 |         32 | t\n  5 | Charley  |     1.5 |        2 |         25 | f\n  6 | Ladybird |     0.6 |        7 |         20 | t\n  7 | Callie   |     0.9 |        4 |         16 | f\n  8 | Jaxson   |     0.4 |        3 |         19 | t\n  9 | Leinni   |     1.0 |        8 |         25 | t\n 10 | Max      |     1.6 |        5 |         65 | f\n(10 rows)\n```\n\nWe’ll use the [PostgreSQL aggregate function][4] `AVG` to get an average puppy\nage.\n\n```sql\nSELECT\n  AVG (age_yrs)\nFROM\n  puppies;\n```\n\nAssuming our previous “puppies” table still exists in our database, if we\nentered the above statement into psql we’d get an _**average age of 0.9**_.\n(_Note: Try it out yourself in psql! Refer to the reading \"Retrieving Rows From\nA Table Using SELECT\" if you need help remembering how we set up the “puppies”\ntable._)\n\nLet's say that we wanted to find all of the puppies that are older than the\naverage age of 0.9. We could write the following query:\n\n```sql\nSELECT\n  name,\n  age_yrs,\n  breed\nFROM\n  puppies\nWHERE\n  age_yrs > 0.9;\n```\n\nIn the above query, we compared `age_yrs` to an actual number (0.9). However, as\nmore puppies get added to our table, the average age could change at any time.\nTo make our statement more dynamic, we can plug in the query we wrote to find\nthe average age into another statement as a _subquery_ (surrounded by\nparentheses).\n\n```sql\nSELECT\n  puppies.name,\n  age_yrs,\n  breeds.name\nFROM\n  puppies\nINNER JOIN\n  breeds ON (breeds.id = puppies.breed_id)\nWHERE\n  age_yrs > (\n    SELECT\n      AVG (age_yrs)\n    FROM\n      puppies\n  );\n```\n\nWe should get the following table rows, which include only the puppies older\nthan 9 months:\n\n```shell\n  name   | age_yrs |        breed\n---------+---------+---------------------\n Cooper  |     1.0 | Miniature Schnauzer\n Charley |     1.5 | Basset Hound\n Leinni  |     1.0 | Miniature Schnauzer\n Max     |     1.6 | German Shepherd\n```\n\n### Multiple-row subquery\n\nWe could also write a subquery that returns multiple rows.\n\nIn the reading \"Creating A Table In An Existing PostgreSQL Database\", we\ncreated a “friends” table. In \"Foreign Keys And The JOIN Operation\", we set up a\nprimary key in the “puppies” table that is a foreign key in the “friends” table\n-- `puppy_id`. We’ll use this ID in our subquery and outer query.\n\n**\"friends\" table**\n```shell\nid | first_name | last_name | puppy_id\n----+------------+-----------+----------\n  1 | Amy        | Pond      |        4\n  2 | Rose       | Tyler     |        5\n  3 | Martha     | Jones     |        6\n  4 | Donna      | Noble     |        7\n  5 | River      | Song      |        8\n```\n\nLet’s say we wanted to find all the puppies that are younger than 6 months old.\n\n```sql\nSELECT puppy_id\nFROM puppies\nWHERE\n  age_yrs < 0.6;\n```\n\nThis would return two rows:\n\n```shell\npuppy_id\n----------\n        2\n        8\n(2 rows)\n```\n\nNow we want to use the above statement as a subquery (inside parentheses) in\nanother query. You’ll notice we’re using a `WHERE` clause with the [IN][5]\noperator to check if the `puppy_id` from the “friends” table meets the\nconditions in the subquery.\n\n```sql\nSELECT *\nFROM friends\nWHERE\n  puppy_id IN (\n    SELECT puppy_id\n    FROM puppies\n    WHERE\n      age_yrs < 0.6\n  );\n```\n\nWe should get just one row back. River Song has a puppy younger than 6 months\nold.\n\n```shell\n id | first_name | last_name | puppy_id\n----+------------+-----------+----------\n  5 | River      | Song      |        8\n(1 row)\n```\n\n## Using joins vs. subqueries\n\nWe can use either a `JOIN` operation or a subquery to filter for the same\ninformation. Both methods can be used to get info from multiple tables. Take the query/subquery from above:\n\n```sql\nSELECT *\nFROM friends\nWHERE\n  puppy_id IN  (\n    SELECT puppy_id\n    FROM puppies\n    WHERE\n      age_yrs < 0.6\n  );\n```\n\nWhich produced the following result:\n\n```shell\n id | first_name | last_name | puppy_id\n----+------------+-----------+----------\n  5 | River      | Song      |        8\n(1 row)\n```\n\nInstead of using a `WHERE` clause with a subquery, we could use a `JOIN`\noperation:\n\n```sql\nSELECT *\nFROM friends\nINNER JOIN puppies ON (puppies.puppy_id = friends.puppy_id)\nWHERE\n  puppies.age_yrs < 0.6;\n```\n\nAgain, we’d get back one result, but because we used an `INNER JOIN` we have\ninformation from both the “puppies” and “friends” tables.\n\n```shell\nid | first_name | last_name | puppy_id |  name  | age_yrs | breed  | weight_lbs | microchipped | puppy_id\n----+------------+-----------+----------+--------+---------+--------+------------+--------------+----------\n  5 | River      | Song      |        8 | Jaxson |     0.4 | Beagle |         19 | t            |        8\n(1 row)\n```\n\n### Should I use a JOIN or a subquery?\n\nAs stated earlier, we could use either a JOIN operation or a subquery to filter\nfor table rows. However, you might want to think about whether using a JOIN or a\nsubquery is more appropriate for retrieving data.\n\nA JOIN operation is ideal when you want to combine rows from one or more tables\nbased on a match condition. Subqueries work great when you’re returning a single\nvalue. When you’re returning multiple rows, you could opt for a subquery or a\nJOIN.\n\nExecuting a query using a JOIN could potentially be faster than executing a\nsubquery that would return the same data. (A subquery will execute once for each\nrow returned in the outer query, whereas the `INNER JOIN` only has to make one\npass through the data.) However, this isn’t always the case. Performance\ndepends on the size of your data, what you’re filtering for, and how the server\noptimizes the query. With smaller datasets, the difference in performance of a\nJOIN and subquery is imperceptible. However, there are use cases where a\nsubquery would improve performance.\n\n(_See this article for more info: [When is a SQL Subquery 260x Faster than a\nLeft Join?][6]_)\n\nWe can use the the [EXPLAIN][11] statement to see runtime statistics of our\nqueries that help with debugging slow queries. (We'll get into this more later!)\n\n## Helpful links:\n\n* PostgreSQL Tutorial: [PostgreSQL Joins][3]\n* PostgreSQL Tutorial: [PostgreSQL Subquery][7]\n* PostgreSQL Docs: [Subquery Expressions][8]\n* Essential SQL: [Subqueries versus Joins][9]\n* Essential SQL: [Using Subqueries with the Select Statement][10]\n\n[1]: https://www.postgresql.org/docs/8.3/tutorial-join.html\n[2]: http://www.postgresqltutorial.com/postgresql-inner-join/\n[3]: http://www.postgresqltutorial.com/postgresql-joins/\n[4]: https://www.postgresql.org/docs/8.2/functions-aggregate.html\n[5]: http://www.postgresqltutorial.com/postgresql-in/\n[6]: https://crate.io/a/sql-subquery-vs-left-join/\n[7]: http://www.postgresqltutorial.com/postgresql-subquery/\n[8]: https://www.postgresql.org/docs/8.3/functions-subquery.html\n[9]: https://www.essentialsql.com/what-is-the-difference-between-a-join-and-subquery/\n[10]: https://www.essentialsql.com/get-ready-to-learn-sql-server-20-using-subqueries-in-the-select-statement/\n[11]: http://www.postgresqltutorial.com/postgresql-explain/\n[orders-erd-many-to-many.svg]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-SQL/assets/inner-join-venn-diagram.png\n"
  },
  "success": true
}