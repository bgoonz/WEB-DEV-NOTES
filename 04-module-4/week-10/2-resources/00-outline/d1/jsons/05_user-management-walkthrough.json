{
  "template": {
    "taskId": "def82987-1738-40ca-bbe4-866a51061983",
    "name": "User Management Walk-Through",
    "repo": "Modular-Curriculum",
    "path": "content/relational-databases/topics/sql/readings/reading-02-creating-a-user-sql.md",
    "type": "Reading",
    "timeEstimate": 1800,
    "urls": [
      "user-management-walk-through"
    ],
    "topic": "Monday - Hello, Database!",
    "subtopic": "Lecture",
    "body": "# User Management Walk-Through\n\n**This is a walk-through**: Please type along as you read what's going on in\nthis article.\n\nIn this walk-through, you will\n\n* Create superusers with full access to the system,\n* Create normal users,\n* Delete users from the system, and,\n* See how SQL is not case sensitive\n\nIt's good practice to create a different database user for each application that\nyou will have connect to an RDBMS. This prevents applications from reading and\nchanging data in _other_ databases that they should not have access to.\n\nThe \"User\" in PostgreSQL is a **database entity** that represents a person or\nsystem that will connect to the RDBMS and access data from one or more\ndatabases. This is the first entity that you will create, modify, and destroy.\n\nAll user management is beyond the scope of the ANSI SQL standard. That means\neach relational database management system has its own vendor-specific\nextensions about how to do this. When working with a new RDBMS, check out its\ndocumentation about how to create users, groups, and other security entities.\n\n## Naming a user\n\nNames of users should not create spaces or dashes. They should contain only\nlower case letters, numbers, and underscores.\n\n* Good user names\n  * appacademy\n  * patel_kush_112\n  * bdorsey\n* Bad (incorrect) user names\n  * Ned Ruggeri\n  * melvin-howard-tormé\n  * b.d.o.r.s.e.y\n\n## Creating a superuser\n\nOn Windows, open your Ubuntu shell. On macOS, open your Terminal. Start the\nPostgreSQL command line client with the command `psql postgres`.\n\nYou should see some information about the version of the database and the\ncommand line tool, plus a helpful hint to type \"help\" if you need help. Then,\nyou will see the `psql` prompt:\n\n```\npostgres=#\n```\n\nThe value \"postgres\" means that you're currently connected to the \"postgres\"\ndatabase. More on that in the next article.\n\nTo create a user in PostgreSQL you will use the following command. It creates a\nuser with the name \"test_superuser\" and the password \"test\". _Type_ that command\n(please don't copy and paste it) and run it by hitting Enter (or Return).\n\n```sql\nCREATE USER test_superuser\nWITH\nPASSWORD 'test'\nSUPERUSER;\n```\n\nNote that this SQL statement ends with a semicolon. All SQL statements in\nPostgreSQL do. Don't forget it. If you do forget it, just type it on an empty\nline. The above statement, for example, can also be entered as the following\nwhere the semicolon is on a line all its own.\n\n```sql\nCREATE USER test_superuser\nWITH\nPASSWORD 'test'\nSUPERUSER\n;\n```\n\nIf you typed it correctly, you will see the message `CREATE ROLE`. Because you\ncreated test_superuser as a super user, when a person or application uses that\nlogin, they can do whatever they want. You will test out that fact, now.\n\nQuit your current session by typing `\\q` and hitting Enter (or Return). Now type\nthe following command to connect to PostgreSQL with the newly-created user. It\ninstructs the client to connect as the user \"test_superuser\" (`-U\ntest_superuser`) to the database named \"postgres\" (`postgres`) and prompt for\nthe password (`-W`) for the user.\n\n```shell\npsql -W -U test_superuser postgres\n```\n\nAt the prompt, type the password _test_ that you used when you created the user.\nIf everything went well, then you will find yourself at the SQL prompt just like\nbefore. To prove to you that you're now the \"test_superuser\", type the following\ncommand.\n\n```sql\nSELECT CURRENT_USER;\n```\n\nIt should respond with the following output:\n\n```\n  current_user\n----------------\n test_superuser\n(1 row)\n```\n\n## Creating a limited user\n\nYou're logged in as a super user that can do anything. Use that power! Create\nanother user that does not have such amazing power. You will rarely create super\nusers in real life. The following user creation is more appropriate. It creates\njust a normal user that can log in. Then, you can assign that user specific\naccess to specific databases.\n\n```sql\nCREATE USER test_normal_user\nWITH\nPASSWORD 'test';\n```\n\nThat should also give you the `CREATE ROLE` message that means everything went\nok.\n\nQuit the session by typing `\\q` and pressing Enter (or Return). Start another as\nthe new user.\n\n```psql\npsql -U test_normal_user -W postgres\n```\n\nType the password _test_ for this user. Confirm that you are now that new user\nby using the `SELECT CURRENT_USER;` command. Once confirmed, try to create a\nuser named _hacking_the_planet_ with a password of _pwned!_. What happens?\n\nThat's right. This user doesn't have the security privileges to create users.\n\nCreate users to do the job you want them to do. Then, give the appropriate\npermissions to that user. This will make a safe and secure application\ndevelopment world for you and your team.\n\n## Removing a user\n\nTime to remove both of these users. The opposite of `CREATE USER` is `DROP\nUSER`. To drop a user, you just type `DROP USER «user name»;`.\n\nConnect again as just you, the OG super user. (Once again, that's with the\ncommand `psql postgres`.)\n\nDrop the normal user with the command\n\n```\nDROP USER test_normal_user;\n```\n\nThen, drop the user with the name \"test_superuser\". You should receive the\nmessage \"DROP ROLE\" for each of your commands.\n\n## Case sensitivity\n\nUnlike JavaScript, the keywords in SQL are case insensitive. that means you can\ntype any of the following and they'll all work.\n\n```sql\nDROP USER test_user;\nDrop User test_user;\ndrop user test_user;\n```\n\nNotice that entity names like user names _are_ case sensitive.\n\nSQL is conventionally written in all uppercase to distinguish the commands from\nthe names that you will have for your entities and their properties.\n\n## What you learned\n\n* That a user is a _database entity_ in PostgreSQL\n* That it is best practice to create a user for each application that you will\n  create\n* How to create a super user with the `CREATE USER ... SUPERUSER` command\n* How to create a restricted (normal) user with the `CREATE USER` command\n* How to remove a user with the `DROP USER` command\n* SQL keywords are not sensitive to case, but are conventionally written in\n  uppercase\n"
  },
  "success": true
}