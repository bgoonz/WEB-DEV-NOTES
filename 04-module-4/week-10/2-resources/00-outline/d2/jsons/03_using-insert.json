{
  "template": {
    "taskId": "55ef17ec-511a-4e2f-a8c6-b94625e52c1d",
    "name": "Using INSERT",
    "repo": "Modular-Curriculum",
    "path": "content/relational-databases/topics/sql/readings/reading-08-create-new-table-sql.md",
    "type": "Reading",
    "timeEstimate": 900,
    "urls": [
      "using-insert"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# Inserting Data Into A Table\n\nIf you have data, but it’s not in tables, does the data even exist? Not to an\napp! We often need to create relational databases on the back end of the Web\napps we’re building so that we can ultimately display this data on the front\nend of our application. All relational database data is stored in tables, so\nit’s important to learn how to create tables and successfully query them.\n\nOf the four data manipulation statements, `INSERT` is the easiest.\n\nCreate a new database named \"folks\". Now, create a new table named \"friends\"\nwith the following column specifications.\n\n| Name       | Data type      | Constraints   |\n|------------|----------------|---------------|\n| id         | `SERIAL`       | `PRIMARY KEY` |\n| first_name | `VARCHAR(255)` | `NOT NULL`    |\n| last_name  | `VARCHAR(255)` | `NOT NULL`    |\n\nNow that we have a new table, we need to add table rows with some data. We can\ninsert a new table row using the following syntax:\n\n```shell\nINSERT INTO table_name\nVALUES\n  (column1_value, colum2_value, column3_value);\n```\n\nLet’s fill out our “friends” table with information about five friends. In\npsql, enter the following to add new table rows. _Note the use of single\nquotation marks for string values. Also note that, since we used the [`SERIAL`\npseudo-type][1] to auto-increment the ID values, we can simply write `DEFAULT`\nfor the ID values when inserting new table rows._\n\n```shell\nINSERT INTO friends (id, first_name, last_name)\nVALUES\n  (DEFAULT, 'Amy', 'Pond');\n```\n\nYou can also completely omit the `DEFAULT` keyword if you specify the names of\nthe columns that you want to insert into.\n\nYou can also use the \"multiple values\" insert. This prevents you from having to\nwrite `INSERT` with every statement. Even better, if one fails, they all fail.\nThat can help protect your data integrity.\n\n```\nINSERT INTO friends (first_name, last_name)\nVALUES\n('Rose', 'Tyler'),\n('Martha', 'Jones'),\n('Donna', 'Noble'),\n('River', 'Song');\n```\n\nUse `SELECT * FROM friends;` to verify that there are rows in the “friends”\ntable:\n\n```shell\nappacademy=# SELECT * FROM friends;\n id | first_name | last_name\n----+------------+-----------\n  1 | Amy        | Pond\n  2 | Rose       | Tyler\n  3 | Martha     | Jones\n  4 | Donna      | Noble\n  5 | River      | Song\n```\n\nNow let’s try to insert a new row using the ID of 5:\n\n```shell\nINSERT INTO friends (id, first_name, last_name)\nVALUES (5, 'Jenny', 'Who');\n```\n\nBecause ID is a primary key and that ID is already taken, we should get a\nmessage in psql that it already exists:\n\n```shell\nappacademy=# insert into friends values (5, 'Jenny', 'Who');\nERROR:  duplicate key value violates unique constraint \"friends_pkey\"\nDETAIL:  Key (id)=(5) already exists.\n```\n\n## What we learned:\n\n* How to connect to an existing PostgreSQL database\n* How to create a new PostgreSQL database\n* How to create a new database table\n* Accepted PostgreSQL data types\n* How to add new rows to a database table\n* What a primary key is/does\n\n[1]: http://www.postgresqltutorial.com/postgresql-serial/\n[2]: http://www.postgresqltutorial.com/postgresql-data-types/\n"
  },
  "success": true
}