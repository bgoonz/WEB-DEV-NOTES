{
  "template": {
    "taskId": "9c13bef2-1463-4fa1-9beb-2b8215108beb",
    "name": "Element Selection &amp; Placement 4",
    "repo": "Modular-Curriculum",
    "path": "content/dom/topics/element-selection-placement/readings/reading-element-selection-placement-part4-js.md",
    "type": "Reading",
    "timeEstimate": 720,
    "urls": [
      "element-selection--amp--placement-4"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# Hello, World DOMination: Console.log, Element.innerHTML, and the Date Object\n\nIn this section, we'll learn about how to use `console.log` to print element\nvalues. We'll also use `Element.innerHTML` to fill in the HTML of a DOM element.\nFinally, we'll learn about the Javascript Date object and how to use it to\nconstruct a clock that keeps the current time.\n\n## Console Logging Element Values\n\nAlong with the other developer tools, the console is a valuable tool Javascript\ndevelopers use to debug and check that scripts are running correctly. In this\nexercise, we'll practice logging to the console.\n\nCreate an HTML file that contains the following:\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head> </head>\n  <body>\n    <ul id=\"your-best-friend\">\n      <li>Has your back</li>\n      <li>Gives you support</li>\n      <li>Actively listens to you</li>\n      <li>Lends a helping hand</li>\n      <li>Cheers you up when you're down</li>\n      <li>Celebrates important moments with you</li>\n    </ul>\n  </body>\n</html>\n```\n\nIn the above code, we see an id with which we can reference the `ul` element.\nRecall that we previously used `document.querySelectorAll()` to store multiple\nelements with the same class name in a single variable, as a NodeList. However,\nin the above example, we see only one id for the parent element. We can\nreference the parent element via its id to get access to the content of its\nchildren.\n\n**Javascript**\n\n```js\nwindow.addEventListener(\"DOMContentLoaded\", event => {\n  const parent = document.getElementById(\"your-best-friend\");\n  const childNodes = parent.childNodes;\n  for (let value of childNodes.values()) {\n    console.log(value);\n  }\n});\n```\n\nIn your browser, use the developer tools to open the console and see that the\nvalues of each `li` have been printed out.\n\n## Using Element.innerHTML\n\nThus far, we have referenced DOM elements via their id or class name and\nappended new elements to existing DOM elements. Additionally, we can use the\ninner HTML property to get or set the HTML or XML markup contained within an\nelement.\n\nIn an HTML file, create a `ul` element with the id \"your-worst-enemy\" that has\nno children. We'll add some JavaScript to construct a string that contains six\n`li` tags each containing a random number and set the inner HTML property of\n`ul#your-worst-enemy` to that string.\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"text/javascript\" src=\"example.js\"></script>\n  </head>\n  <body>\n    <ul id=\"your-worst-enemy\"></ul>\n  </body>\n</html>\n```\n\n**Javascript**\n\n```js\n// generate a random number for each list item\nconst getRandomInt = max => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\n// listen for DOM ready event\nwindow.addEventListener(\"DOMContentLoaded\", event => {\n  // push 6 LI elements into an array and join\n  const liArr = [];\n  for (let i = 0; i < 6; i++) {\n    liArr.push(\"<li>\" + getRandomInt(10) + \"</li>\");\n  }\n  const liString = liArr.join(\" \");\n\n  // insert string into the DOM using innerHTML\n  const listElement = document.getElementById(\"your-worst-enemy\");\n  listElement.innerHTML = liString;\n});\n```\n\nSave your changes, and refresh your browser page. You should see six new list\nitems on the page, each containing a random number.\n\n## Inserting a Date Object into the DOM\n\nWe've learned a lot about accessing and manipulating the DOM! Let's use what\nwe've learned so far to add extra functionality involving the Javascript Date\nobject.\n\nOur objective is to update the title of the document to the current time at a\nreasonable interval such that it looks like a real clock.\n\nWe know we'll be starting with an HTML document that contains an empty title\nelement. We've learned a couple of different ways to fill the content of an\nelement so far. We could create a new element and append it to the title\nelement, or we could use `innerHTML` to set the HTML of the title element. Since\nwe don't need to create a new element nor do we care whether it appears last, we\ncan use the latter method.\n\nLet's give our title an id for easy reference.\n\n**HTML**\n\n```html\n<title id=\"title\"></title>\n```\n\nIn our Javascript file, we'll use the Date constructor to instantiate a new\n[Date object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date).\n\n```js\nconst date = new Date();\n```\n\n**Javascript**\n\n```js\nwindow.addEventListener(\"DOMContentLoaded\", event => {\n  const title = document.getElementById(\"title\");\n  const time = () => {\n    const date = new Date();\n    const seconds = date.getSeconds();\n    const minutes = date.getMinutes();\n    const hours = date.getHours();\n\n    title.innerHTML = hours + \":\" + minutes + \":\" + seconds;\n  };\n  setInterval(time, 1000);\n});\n```\n\nSave your changes and refresh your browser. Observe the clock we inserted\ndynamically keeping the current time in your document title!\n\n## What We Learned:\n\n- What the DOM is and how we can access it\n- How to access DOM elements using `document.getElementById()` and\n  `document.querySelectorAll()`\n- How to create new elements with `document.createElement()` and\n  `document.createTextNode`, and append them to existing DOM elements with\n  `Element.appendChild()`\n- The difference between `window.onload` and `DOMContentLoaded`\n- How to access children nodes with `NodeList.childNodes`\n- Updating DOM elements with `Element.innerHTML`\n- The Javascript Date object\n"
  },
  "success": true
}