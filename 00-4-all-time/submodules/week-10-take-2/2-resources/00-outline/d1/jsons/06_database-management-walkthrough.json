{
  "template": {
    "taskId": "c911395e-dc77-4469-8954-027636efbf23",
    "name": "Database Management Walk-Through",
    "repo": "Modular-Curriculum",
    "path": "content/relational-databases/topics/sql/readings/reading-03-creating-databases-sql.md",
    "type": "Reading",
    "timeEstimate": 2700,
    "urls": [
      "database-management-walk-through"
    ],
    "topic": "Monday - Hello, Database!",
    "subtopic": "Lecture",
    "body": "# Database Management Walk-Through\n\n**This is a walk-through**: Please type along as you read what's going on in\nthis article.\n\nIn this walk-through, you will\n\n* Create a database for your user,\n* Create databases for other users,\n* Apply security to the databases to prevent access,\n* See the first example of \"relational data\" in the RDBMS, and,\n* Create other databases and apply security to them.\n\nNow that you can create users for each of your applications, it's time for you\nto be able to create a **database**. The database is where you will store the\ndata for your application.\n\nYou've been using the following command to log in as your superuser to the\n\"postgres\" database. This works because if you don't specify a user with the\n`-U` command line parameter, it just uses the name of the currently logged in\nuser, your user name.\n\n```sql\npsql postgres\n```\n\nThat's because if you don't specify a database, then PostgreSQL will try to\nconnect you to a database that has the same name as your user. Try it, now.\n\n```sql\npsql\n```\n\nWhen you run this, if there is no database with your user name, then you will\nreceive an error message that reads like the following. (The text has been\nwrapped in the example for readability.)\n\n```\npsql: error: could not connect to server:\n      FATAL:  database \"appacademy\" does not exist\n```\n\n## Naming a database\n\nNames of databases should not create spaces or dashes. They should contain only\nlower case letters, numbers, and underscores.\n\n* Good database names\n  * appacademydata\n  * financials2020\n  * chicago_office\n* Bad (incorrect) database names\n  * App Academy Data\n  * financials-2020\n  * chicago.office\n\n## Creating a database for your user\n\nSo that you don't have to type \"postgres\" every time you want to connect on the\ncommand line, you can create a database with your user name so that one will\nexist. To determine your user name, type the following command at your shell,\n_not_ in PostgreSQL.\n\n```shell\nwhoami\n```\n\nThat will show you the name of your user. Remember that name. Now, start your\nPostgreSQL command line as your superuser.\n\n```shell\npsql postgres\n```\n\nThat should result in the `psql` command prompt of `postgres=#`. Again, that\nmeans that you are currently connected to the \"postgres\" database.\n\nOnce you're greeted by the `postgres=#` command prompt, you can create a\ndatabase for your user by typing the following command. Don't copy and paste,\nhere. Type it out.\n\n```sql\nCREATE DATABASE «your user name» WITH OWNER «your user name»;\n```\n\nBy making yourself the owner of that database, then your user can do anything\nwith it.\n\nFor the examples in these articles, the user name is \"appacademy\", so the\nauthors typed\n\n```sql\nCREATE DATABASE appacademy WITH OWNER appacademy;\n```\n\nIf the command succeeds, you will see the message \"CREATE DATABASE\". Now, quit\nthe client using `\\q`. Now, connect, again, to PostgreSQL by just typing the\nfollowing.\n\n```shell\npsql\n```\n\nNow, when you log in, you will be greeted by a command prompt that reads\n\n```\n«your user name»=#\n```\n\nYou're connected to your very own database! And, now, you have less to type when\nyou want to start `psql`! Yay for less typing!\n\n## Creating other users and databases\n\nCreate two normal users with the following user names and passwords using the\n`CREATE USER` command from the last article.\n\n| User name | Password |\n|-----------|----------|\n| ada       | ada1234  |\n| odo       | ODO!!!1  |\n\nNow, create two databases, each named for a user with that user as the owner.\nAgain, type these rather than copying and pasting.\n\n```sql\nCREATE DATABASE ada WITH OWNER ada;\nCREATE DATABASE odo WITH OWNER odo;\n```\n\nNow that you have new users and databases for them, it's time to test out that\nyou can connect to PostgreSQL with those users. Quit your current session by\ntyping `\\q` and pressing Enter (or Return). Then, start a new session for \"ada\"\nby using the following `psql` command that will prompt for the user's password\n(`-W`) and connect as the specified user (`-U ada`).\n\n```shell\npsql -W -U ada\n```\n\n**Note**: Those command line parameters can come in any order, usually. The\nabove statement can also be written as `psql -U ada -W`, for example.\n\nWhen you enter that and type the password for \"ada\" which is \"ada1234\" from the\ntable above, you should see that you are now connected to the \"ada\" database in\nthe prompt.\n\n```\nada=>\n```\n\nNotice that the character at the end is now a \">\" rather than the \"#\" that\nyou're used to seeing. That's because \"ada\" is a normal user. Normal user\nprompts end with \">\". Your user, the one tied to your user name, is a super\nuser. That results in a \"#\"\n\nQuit this session and connect as the \"odo\" user, now. You will notice that\nbecause \"odo\" is a normal user, that you will see this prompt, too.\n\n```\nodo=>\n```\n\n## Applying security to databases\n\nYou've created a database for \"odo\". Type the following command which will try\nto connect as the user \"ada\" (`-U ada`) to the database \"odo\" (`odo`).\n\n```shell\npsql -W -U ada odo\n```\n\nAfter you type the password, you may be surprised to find out that \"ada\" can\nconnect to the database \"odo\" that's owned by the user \"odo\"! That's because all\ndatabases, when they're created, by default allow access to what is known as the\n\"PUBLIC\" schema, a kind of group that everyone belongs to. You sure don't want\nthat if you want to prevent the user \"ada\" from messing up the data in the\ndatabase \"odo\", and the user \"odo\" from messing up the data in the database\n\"ada\".\n\nTo do that, you have to revoke connection privileges to \"PUBLIC\". That's like\nputting a biometric lock on a bank safety deposit box so that only the owner of\nthat deposit box (and bank officials) can get into it and do stuff with its\ncontents.\n\nTo do that, quit the current `psql` session if you're in one. Connect to\nPostgreSQL as your user, a superuser. Again, now that you have your own\ndatabase, you can just type `psql` at your macOS Terminal command line or Ubuntu\nshell command line. Once you have your prompt\n\n```\n«your user name»=#\n```\n\nyou want to type a command that will revoke all privileges from the databases\nnamed \"odo\" and \"ada\" the connection privileges of the entire \"PUBLIC\" group. To\ndo that, you write the command with the form:\n\n```sql\nREVOKE CONNECT ON DATABASE «database name» FROM PUBLIC;\n```\n\nDo that for both databases. Each time you run it, you should see the message\n\"REVOKE\" showing that it worked.\n\nNow, quit your session (`\\q`). With the connection privilege revoked, \"ada\" can\nno longer connect to database \"odo\" and vice versa. Try typing the following.\n\n```shell\npsql -W -U ada odo\n```\n\nYou should see an error message similar to the following.\n\n```\npsql: error: could not connect to server:\n      FATAL:  permission denied for database \"odo\"\nDETAIL:  User does not have CONNECT privilege.\n```\n\nTry connecting with the user \"odo\" to the database named \"ada\". You should see\nthe same error message except with the database named \"ada\" in it.\n\nBut, your superuser status will not be thwarted! You can still connect to either\nof those because of your superuser privileges. Neither of the following commands\nshould fail.\n\n```shell\n# Connect to the database \"odo\" as your superuser\npsql odo\n```\n\n```shell\n# Connect to the database \"ada\" as your superuser\npsql ada\n```\n\nSuperusers can connect to any and all databases. Because _superuser_!\n\nRemember you created a database for your user? Now, revoke connection privileges\nfrom it for \"PUBLIC\", too.\n\n## Listing databases and granting privileges\n\nNow, say the user \"ada\" needs another database, one that will contain data that\n\"ada\" wants to keep separate from the data in the database \"ada\". Connect to\nPostgreSQL as your user. Create a new database without specifying the owner.\n\n```sql\nCREATE DATABASE hr_data;\n```\n\nNow, type the command to list databases on your installation of PostgreSQL.\n\n```sql\n\\list\n```\n\nYou will see something akin to the following. The entries in the \"Collate\",\n\"Cypte\", and \"Access privileges\" columns may differ. That's fine and can be\nignored. Also, where you see \"appacademy\", you'll probably see your user name.\n\n| Name       | Owner      | Encoding | Collate | Ctype | Access privileges          |\n|------------|------------|----------|---------|-------|----------------------------|\n| ada        | ada        | UTF8     | C       | C     | =T/ada                   + |\n|            |            |          |         |       | ada=CTc/ada                |\n| appacademy | appacademy | UTF8     | C       | C     |                            |\n| hr_data    | appacademy | UTF8     | C       | C     |                            |\n| odo        | odo        | UTF8     | C       | C     | =T/odo                   + |\n|            |            |          |         |       | odo=CTc/odo                |\n| postgres   | appacademy | UTF8     | C       | C     |                            |\n| template0  | appacademy | UTF8     | C       | C     | =c/appacademy            + |\n|            |            |          |         |       | appacademy=CTc/appacademy  |\n| template1  | appacademy | UTF8     | C       | C     | =c/appacademy            + |\n|            |            |          |         |       | appacademy=CTc/appacademy  |\n\nYou will see that for the database that you just created, \"hr_data\", that the\nowner is you. Go ahead and revoke all access to it from \"PUBLIC\" like you did in\nthe last section. Once you've done that, no one but you (and other superusers)\ncan connect to the \"hr_data\" database. (You may want to exit the `psql` shell\nand try connecting with the credentials for the \"ada\" user just to make sure. If\nyou do that, reconnect as your user so you can continue with the security\nmanagement.)\n\nNow, you need to add \"ada\" back to it so that user can connect to the database.\nThe opposite of `REVOKE ... FROM ...` is `GRANT ... TO ...`. So, you will type\nthe following:\n\n```sql\nGRANT CONNECT ON DATABASE hr_data TO ada;\n```\n\nNow, if you exit the `psql` shell and connect as \"ada\", you will see that user\ncan connect. Make sure that's true.\n\n```shell\npsql -U ada hr_data\n```\n\nOnce you have confirmed that \"ada\" can connect, make sure that user \"odo\" cannot\nconnect.\n\n```shell\npsql -U odo hr_data\n```\n\nThat command should return the error message that reads that the user \"does not\nhave CONNECT privilege.\"\n\n## Time to clean up\n\nTime to clean up the entities that you've created in this walk-through. You\nalready know how to delete a user by using the `DROP USER` statement. Log in as\nyour superuser and try to drop the \"ada\" user. You should see an error message\nsimilar to the following.\n\n```\nERROR:  role \"ada\" cannot be dropped because some objects depend on it\nDETAIL:  owner of database ada\nprivileges for database hr_data\n```\n\nThis tells you that you can't drop that user because database objects in the\nsystem rely on the existence of the user \"ada\". This is the first example that\nyou've seen of _relational data_. The database \"ada\" is related to the user\n\"ada\" because user \"ada\" owns the database \"ada\". The database \"hr_data\" is\nrelated to the user \"ada\" because the user \"ada\" has access privileges for the\ndatabase \"hr_data\".\n\nThis is one of the primary reasons that relational databases provide such an\nimportant role in application design and development. If you or your application\nputs data into the database that relates to other data, you can't just remove it\nwithout removing _all of the related data, too_!\n\nTo remove the related data from user \"ada\", you need to revoke the connect\nprivilege on \"hr_data\" for user \"ada\". Then, you need to delete the database\n\"ada\" that user \"ada\" owns. You've seen some `REVOKE` statements in this article\nthat revoke the connect privilege from \"PUBLIC\". It's the same for an individual\nuser, too, just replace \"PUBLIC\" with the name of the user.\n\nThen, the opposite of `CREATE DATABASE` is `DROP DATABASE` just like the\nopposite of `CREATE USER` is `DROP USER`.\n\nPutting together those two hints, you can type commands like this to get the\njob done.\n\n```sql\nREVOKE CONNECT ON DATABASE hr_data FROM ada;\nDROP DATABASE ada;\nDROP USER ada;\n```\n\nRun in that order, the first two statements remove the data _related_ to the\nuser \"ada\". Once that's gone, you can finally remove the user \"ada\" itself.\n\nDo the same for the user \"odo\", deleting the related data, first. Remember, you\ncan run the `DROP` statement for the user \"odo\" to see what data relates to that\nuser.\n\n**Note**: When you run a statement in PostgreSQL that results in an error\nmessage, do not worry! You have not corrupted anything! These are helpful\nstatements to let you know that the state of the database won't allow you to\nperform the requested operation. These kinds of error statements are guideposts\nfor you to follow to get to the place you want to be.\n\n## What you've done\n\nYou have successfully created databases for yourself and other users. You have\ncreated a database with you as the owner and given access to it to another user.\nYou have locked down databases so only owners (and superusers) can access them.\nYou know how to see the owner of a database. You know how to remove a user from\na database after removing all data related to the user.\n\nThis is the start of a lovely secure set of databases.\n"
  },
  "success": true
}