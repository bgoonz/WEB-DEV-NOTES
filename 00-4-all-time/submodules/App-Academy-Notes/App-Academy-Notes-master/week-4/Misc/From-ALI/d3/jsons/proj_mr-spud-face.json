{
  "template": {
    "taskId": "fdb86708-bfed-45a5-b2dc-de1bb23b36ab",
    "name": "Mr. Spud Face Project",
    "repo": "Modular-Curriculum",
    "path": "content/dom/topics/event-handling/projects/spud-face/README.md",
    "type": "Project",
    "timeEstimate": 10800,
    "urls": [
      "mr--spud-face-project"
    ],
    "topic": "Wednesday - Event Handling",
    "subtopic": "Practices",
    "download": "https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-DOM-API/event-handling/projects/spud-face-project.zip",
    "solution": "https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-DOM-API/event-handling/projects/spud-face-project-solution.zip",
    "body": "# Project: Event Handling With Mr. Spud Face\n\nMr. Spud Face is a charming potato with an inexplicably handsome face. He has\nrecently moved to your state and needs to get an updated driver’s license with\nhis current information, so that he can do nifty things like drive to the\ngrocery store, vote, and take his spud spouse on special dates.  \n\nUse Javascript to create a driver’s license for Mr. Spud Face. If you want to\ngo the extra mile, create a Mr. Spud Face drag-and-drop game as a bonus.\n\nNow that you know how to handle page events with Javascript, put that knowledge\ninto use on this project!\n\nIn this project, you will:\n\n- Write Javascript to handle common form events\n- Handle input, checkbox, and button click events\n- Grab form values and update elements with those values\n- Utilize bubbling and event delegation\n- Use the HTML Drag-and-Drop API (if you dare!)\n\n## Project overview\n\nUse what you’ve learned about event handling to complete this project.\nDemonstrate that you can use event listeners on page elements and event\nhandlers.  \n\n**We have set up a project folder for you to use inside this folder called\n`spud-face-project.zip`** with an HTML file, CSS file, and Javascript file. Use\nthis folder to complete your project.\n\nIn phases 1-4, you will write Javascript to grab the driver’s license form\nvalues and update Mr. Spud Face’s license, as well as handle other form events\non inputs and button clicks. To get a good understanding of the HTML\nDrag-and-Drop API, complete the bonus section by making a drag-and-drop spud\ngame.\n\n## Phase 1: Create a spud driver’s license\n\nIn your `spud-face-project` folder, open up your `spud-face.html` file. Open it\nup in a browser to see what the page looks like.\n\nWe’ve filled it with elements, chief of which are a `<form>` element and a\n`<div>` depicting a driver’s license. Use the form to build out the driver’s\nlicense information.\n\n### Phase 1A: Get form values and display on driver’s license\n\nThe form values on the left should update the driver’s license information on\nthe right. Set up event listeners on the form whenever the user inputs a value\ninto a form input. Get the value of that form input and update the\ncorresponding information on the driver’s license. You might want to use the\nfollowing:\n\n- [document.getElementById()][1]\n- [eventTarget.addEventListener()][2]\n- [HTMLElement: input event][3]\n- [checkbox.checked attribute][4]\n\n### Phase 1B: Refactor to use event delegation and event.target\n\nIn phase 1A, you might have set up event listeners on each form input. While\nthat does work, it would be ideal to make use of [event delegation][5] and\nattach a single listener to our form.\n\n1. Set up a single event listener on the form to listen for an input change.\n2. Write some logic, in the form of an `if` statement or `switch` case\nstatement, to update the `innerHTML` of the driver’s license elements that\ncorrespond with `event.target`.\n3. You may want to use `event.target.id` and `event.target.value`.\n4. Make sure your script runs after the DOM has loaded.\n\n## Phase 2: Add focus and blur events to form inputs\n\nJazz up your form inputs by adding a quick color change on `focus`, and\nremoving it on `blur`. Give active inputs a background color of `lightgreen`\nand no background color (initial state) when inactive. Use the following to do\nso:\n\n- `Element: focus event`\n- `Element: blur event`\n\n## Phase 3: Check that license numbers match\n\nCheck that the numbers entered by the user on the license number fields match.\nIn your HTML file, these are represented by the inputs with the IDs of\n`input-license-num` and `input-license-num-confirm`.\n\nIf the numbers don’t match, then change the background color of both inputs to\nbe `lightcoral`.\n\nAgain, you’ll use `event.target.value` here. You might want to use\n`setTimeout()` to give the user some time to fill out the form.\n\n## Phase 4: Update submit button click count\n\nSince this isn’t a real form that actually submits the driver’s license info\nanywhere, you won’t need to make a server or API request. Instead, write a\nfunction to increment the click count every time the submit button is clicked.\n\nListen for a `click` event on the button. Then, update the click count inside\nof the button.\n\n## Bonus: Mr. Spud Face Drag-and-Drop Game\n\nUse the [HTML Drag-and-Drop API][6] to create a Mr. Spud Face drag-and-drop\ngame inside of your `spud-face.html` file.\n\nAdd the images inside of the project’s `images` folder to your HTML file, and\nwrite Javascript that will let the user drag the spud body parts and drop them\nonto the spud body. Set up handlers for these drag events:\n\n- `dragStart`\n- `drag` or `dragOver`\n- `dragEnd` or `drop`\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n[3]: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event\n[4]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#checked\n[5]: https://javascript.info/event-delegation\n[6]: https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API\n"
  },
  "success": true
}