{
  "template": {
    "taskId": "b624b1e3-c27a-4b4b-aea8-7e7fb464c794",
    "name": "Element Selection &amp; Placement 1",
    "repo": "Modular-Curriculum",
    "path": "content/dom/topics/element-selection-placement/readings/reading-element-selection-placement-part1-js.md",
    "type": "Reading",
    "timeEstimate": 600,
    "urls": [
      "element-selection--amp--placement-1"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# Hello, World DOMination: Element Selection And Placement\n\nThe objective of this lesson is to familiarize yourself with the usage and inner\nworkings of the DOM API. When you finish this lesson, you should be able to:\n\n- Reference and manipulate the DOM via Javascript\n- Update and create new DOM elements via Javascript\n- Change CSS based on a DOM event\n- Familiarize yourself with the console\n\n## What is the DOM?\n\nThe\n[Document Object Model](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction),\nor DOM, is an object-oriented representation of an HTML document or Web page,\nmeaning that the document is represented as objects, or nodes. It allows\ndevelopers to access the document via a programming language, like Javascript.\n\nThe DOM is typically depicted as a tree with a specific hierarchy. (See the\nimage below.) Higher branches represent parent nodes, while lower branches\nrepresent child nodes, or children. More on that later.\n\n<p>\n  <img src=\"https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-DOM-API/element-selection/assets/DOM_tree.png\" style=\"max-width: 50%; height: auto;\">\n</p>\n\n## Referencing the DOM\n\nThe DOM API is one of the most powerful tools frontend developers have at their\ndisposal. Learning how to reference, create, and update DOM elements is an\nintegral part of working with Javascript. We'll start this lesson by learning\nhow to reference a DOM element in Javascript.\n\nLet’s assume we have an HTML file that includes the following `div`:\n\n**HTML**\n\n```html\n<div id=\"”catch-me-if-you-can”\">HI!</div>\n```\n\nBecause we've added the element to our HTML file, that element is available in\nthe DOM for us to reference and manipulate. Using JavaScript, we can reference\nthis element by scanning the document and finding the element by its id with the\nmethod document.getElementById(). We then assign the reference to a variable.\n\n**Javascript**\n\n```js\nconst divOfInterest = document.getElementById(“catch-me-if-you-can”)\n```\n\nNow let’s say that our HTML file contains seven `span` elements that share a\nclass name of `cloudy`, like below:\n\n**HTML**\n\n```html\n<span class=\"“cloudy”\"></span>\n<span class=\"“cloudy”\"></span>\n<span class=\"“cloudy”\"></span>\n<span class=\"“cloudy”\"></span>\n<span class=\"“cloudy”\"></span>\n<span class=\"“cloudy”\"></span>\n<span class=\"“cloudy”\"></span>\n```\n\nIn Javascript, we can reference all seven of these elements and store them in a\nsingle variable.\n\n**Javascript**\n\n```js\nconst cloudySpans = document.querySelectorAll(\"span.cloudy\");\n```\n\nWhile `getElementById` allows us to reference a single element,\n`querySelectorAll` references all elements with the class name “cloudy” as a\nstatic `NodeList` (_static_ meaning that any changes in the DOM do not affect\nthe content of the collection). Note that a NodeList is different from an array,\nbut it is possible to iterate over a NodeList as with an array using\n[forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).\nRefer to the MDN doc on\n[NodeList](https://developer.mozilla.org/en-US/docs/Web/API/NodeList) for more\ninformation.\n\nUsing `forEach()` on a NodeList:\n\n**Javascript**\n\n```js\nconst cloudySpans = document.querySelectorAll(\"span.cloudy\");\n\ncloudySpans.forEach(span => {\n  console.log(\"Cloudy!\");\n});\n```\n\n## Creating New DOM Elements\n\nNow that we know how to reference DOM elements, let's try creating new elements.\nFirst we'll set up a basic HTML file with the appropriate structure and include\na reference to a Javascript file that exists in the same directory in the\n`head`.\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title></title>\n    <script type=\"text/javascript\" src=\"example.js\"></script>\n  </head>\n  <body></body>\n</html>\n```\n\nIn our example.js file, we'll write a function to create a new `h1` element,\nassign it an id, give it content, and attach it to the body of our HTML\ndocument.\n\n**Javascript**\n\n```js\nconst addElement = () => {\n  // create a new div element\n  const newElement = document.createElement(\"h1\");\n\n  // set the h1's id\n  newElement.setAttribute(\"id\", \"sleeping-giant\");\n\n  // and give it some content\n  const newContent = document.createTextNode(\"Jell-O, Burled!\");\n\n  // add the text node to the newly created div\n  newElement.appendChild(newContent);\n\n  // add the newly created element and its content into the DOM\n  document.body.appendChild(newElement);\n};\n// run script when page is loaded\nwindow.onload = addElement;\n```\n\nIf we open up our HTML file in a browser, we should now see the words\n`Jell-O Burled!` on our page. If we use the browser tools to inspect the page\n(right-click on the page and select “inspect”, or hotkeys fn + f12), we notice\nthe new `h1` with the id we gave it.\n"
  },
  "success": true
}