{
  "template": {
    "taskId": "3c52bff0-36ef-4162-b04c-c3c2236542bd",
    "name": "Recipe Box",
    "repo": "Modular-Curriculum",
    "path": "content/relational-databases/topics/sql/projects/project-4-data-access-layer-for-recipe-app/README.md",
    "type": "Project",
    "timeEstimate": 7200,
    "urls": [
      "recipe-box"
    ],
    "topic": "Wednesday - Deeper Into Data",
    "subtopic": "Practices",
    "download": "",
    "solution": "",
    "body": "# Recipe Box\n\nIn this project, you will build the Data Access Layer to power a Web\napplication. This means that you will provide all of the SQL that it takes to\nget data into and from the database. You will do this in SQL files that the\napplication will load and read.\n\n**Note**: This is not a good way to create a database-backed application. This\nproject is structured this way so that it isolates the activity of SQL writing.\nDo not use this project as a template for your future projects.\n\n## The data model analysis\n\nWhat goes into a recipe box? Why, recipes, of course! Here's an example recipe\ncard.\n\n![Recipe card]\n\nYou can see that a recipe is made up of three basic parts:\n\n* A title,\n* A list of ingredients, and\n* A list of instructions.\n\nYou're going to add a little more to that, too. It will also have\n\n* The date/time that it was entered into the recipe box, and\n* The date/time it was last updated in the recipe box.\n\nThese are good pieces of data to have so that you can show them \"most recent\"\nfor example.\n\nIngredients themselves are complex data types and need their own structure. They\n\"belong\" to a recipe. That means they'll need to reference that recipe. That\nmeans an ingredient is made up of:\n\n* An amount (optional),\n* A unit of measure (optional),\n* The actual food stuff, and\n* The id of the recipe that it belongs to.\n\nThat unit of measure is a good candidate for normalization, don't you think?\nIt's a predefined list of options that should not change and that you don't want\npeople just typing whatever they want in there, not if you want to maintain\ndata integrity. Otherwise, you'll end up with \"C\", \"c\", \"cup\", \"CUP\", \"Cup\", and\nall the other permutations, each of which is a distinct value but means the same\nthing.\n\nInstructions are also complex objects, but not by looking at them. Initially,\none might only see text that comprises an instruction. But, very importantly,\ninstructions have _order_. They also _belong_ to the recipe. With that in mind,\nan instruction is made up of:\n\n* The text of the instruction,\n* The order that it appears in the recipe, and\n* The id of the recipe that it belongs to.\n\nThat is enough to make a good model for the recipe box.\n\n![recipe box data model]\n\n## Getting started\n\n* Download the starter project from\n  https://github.com/appacademy-starters/sql-recipe-box\n* Run `npm install` to install the packages\n* Run `npm start` to start the server on port 3000\n\nYou'll do all of your work in the **data-access-layer** directory. In there, you\nwill find a series of SQL files. In each, you will find instructions of what to\ndo to make the user interface to work. They are numbered in an implied order for\nyou to complete them. The only real requirement is that you finish the SQL for\nthe **00a-schema.sql** and **00b-seed.sql** files first. That way, as you make\nyour way through the rest of the SQL files, the tables and some of the data will\nalready exist for you. You can run the command `npm run seed` to run both of\nthose files or pipe each it into `psql` as you've been doing.\n\nEither way that you decide to seed the database, you'll need to stop your\nserver. The seed won't correctly run while the application maintains a\nconnection to the application database. You may also need to exit all of the\nactive `psql` instances that you have running to close out all of the active\nconnections. When you run the seed, if it reports that it can't do something\nbecause of active connections, look for a running instance of the server,\nPostbird, or `psql` with that connection.\n\n**Warning**: running the seed files will destroy all data that you have in the\ndatabase.\n\n## Your SQL\n\nWhen you write the SQL, they will mostly be parameterized queries. The first\ncouple of files will show you how it needs to be done, where you will place the\nparameter placeholders \"$1\", \"$2\", and so on. If you need to, refer to the\n[Parameterized query] section of the documentation for **node-postgres**.\n\nIn each of the following files in the **data-access-layer**, you will find one\nor more lines with the content `-- YOUR CODE HERE`. It is your job to write the\nSQL statement described in the block above that code. Each file is named with\nthe intent of the SQL that it should contain.\n\n## The application\n\nThe application is a standard [express.js] application using the [pug] library\nto generate the HTML and the [node-postgres] library to connect to the database.\n\nIt reads your SQL files whenever it wants to make a database call. If your file\nthrows an error, then the UI handles it by telling you what needs to be fixed\nso that the UI will work. The application will also output error messages for\nmissing functionality.\n\nThe SQL files contain a description of what the content is and where it's used\nin the application. Tying those together, you'll know you're done when you have\nall of the SQL files containing queries and there are no errors in the UI or\nconsole.\n\n## Directions\n\nFill out the **00a-schema.sql** and **00b-seed.sql** files first. Then seed\nthe database with command, `npm run seed`.\n\n### Home Page\n\nStart the server by running `npm run dev`. Then go to `localhost:3000` you should\nsee the home page with \"Latest Recipes\". To show the latest recipes properly, \ncomplete the `01-get-ten-most-recent-recipes.sql` file.\n\nAfter completing the file, make sure you correctly defined the sql query so that\nthe first recipe listed is the most recently updated recipe.\n\n### `/recipes/:id`\n\nIf you click on one of the recipes in the list of recipes on the home page, it\nwill direct you to that recipe's Detail Page. Complete the following files that\ncorrespond to this page and make sure to test a file right after you fill out \nthe file by refreshing the page:\n  - `02a-get-recipe-by-id.sql`\n  - `02b-get-ingredients-by-recipe-id.sql`\n  - `02c-get-instructions-by-recipe-id.sql`\n\nMake sure to read the instructions well! In all the above sql queries, the \n`$1` parameter will be the recipe id.\n\n### `/recipes/new`\n\nClick on `ADD A RECIPE` button on the Navigation Bar to direct you to the \nNew Recipe Form page. Fill out the `03a-insert-new-recipe.sql` file so you can\ncreate a new recipe.\n\n### `/recipes/:id/edit`\n\nAfter creating a new recipe, you will be directed to the Recipe Edit page where\nyou can add instructions and ingredients to a recipe. Complete the following \nfiles that correspond to this page and make sure to test a file right after\nyou fill out the file:\n  - `03b-get-units-of-measure.sql`\n  - `04-insert-new-ingredient.sql`\n  - `05-insert-new-instruction.sql`\n  - `06-delete-recipe.sql`\n\n### `/recipes?term={searchTerm}`\n\nAllow users to find recipes by a part of their name using the Search Bar in the\nNavigation Bar. Complete `07-search-recipes.sql` for this feature.\n\n[Recipe card]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-SQL/assets/sql-recipe-card.jpeg\n[express.js]: https://www.expressjs.com\n[pug]: https://pugjs.org\n[node-postgres]: https://node-postgres.com\n[Parameterized query]: https://node-postgres.com/features/queries#Parameterized%20query\n[recipe box data model]: https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Module-SQL/assets/sql-recipe-box-data-model.png\n"
  },
  "success": true
}