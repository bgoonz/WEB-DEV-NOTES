{
  "template": {
    "taskId": "617c5764-5fb1-48c1-be52-54908091b020",
    "name": "CRUD Operations With Sequelize",
    "repo": "Modular-Curriculum",
    "path": "content/relational-databases/topics/orm/readings/reading-03-crud-operations-orm-js.md",
    "type": "Reading",
    "timeEstimate": 1800,
    "urls": [
      "crud-operations-with-sequelize"
    ],
    "topic": "Homework for Thursday",
    "subtopic": "Homework",
    "body": "# CRUD Operations Using Sequelize\n\nThere are four general ways to interact with a database. To illustrate\nthese, recall our `Cats` table. We can:\n\n1. Save a new cat to the database by _creating_ a new row in the\n   `Cats` table,\n2. We can _read_ previously stored cat data by fetching a row (or\n   multiple rows) out of the `Cats` table,\n3. We can _update_ some of the column values for a pre-existing cat by\n   modifying a row in the `Cats` table,\n4. We can delete (_destroy_) the data for a cat by removing a row in\n   the `Cats` table.\n\nThese four actions are sometimes abbreviated as _CRUD_. After this\nreading, you will be able to:\n\n* Use Sequelize to create new records in a table,\n* Use Sequelize to read/fetch existing records by primary key,\n* Use Sequelize to update existing records with new attribute values,\n* Use Sequelize to delete records from a table.\n\n## Creating A New Record\n\nTo save a new cat's data as a row in the `Cats` table, we do a two step\nprocess:\n\n1. We call the static `build` method on the `Cat` class with the desired values.\n2. We call the `save` method on the `cat` instance.\n\nLet's see an example:\n\n```javascript\nconst { sequelize, Cat } = require(\"./models\");\n\nasync function main() {\n  // Constructs an instance of the JavaScript `Cat` class. **Does not\n  // save anything to the database yet**. Attributes are passed in as a\n  // POJO.\n  const cat = Cat.build({\n    firstName: \"Markov\",\n    specialSkill: \"sleeping\",\n    age: 5,\n  });\n\n  // This actually creates a new `Cats` record in the database. We must\n  // wait for this asynchronous operation to succeed.\n  await cat.save();\n\n  console.log(cat.toJSON());\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nRunning the code:\n\n```\nExecuting (default): INSERT INTO \"Cats\" (\"id\",\"firstName\",\"specialSkill\",\"age\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING *;\n{\n  id: 1,\n  firstName: 'Markov',\n  specialSkill: 'sleeping',\n  age: 5,\n  updatedAt: 2020-02-11T19:04:23.116Z,\n  createdAt: 2020-02-11T19:04:23.116Z\n}\n```\n\nA new row has been inserted into the `Cats` table. We see that `id`,\n`updatedAt`, and `createdAt` were each autogenerated for us.\n\n## Reading A Record By Primary Key\n\nLet's read an existing record from the database:\n\n```javascript\nconst { sequelize, Cat } = require(\"./models\");\n\nasync function main() {\n  // Fetch the cat with id #1.\n  const cat = await Cat.findByPk(1);\n  console.log(cat.toJSON());\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nRunning this code prints:\n\n```\nExecuting (default): SELECT \"id\", \"firstName\", \"specialSkill\", \"age\", \"createdAt\", \"updatedAt\" FROM \"Cats\" AS \"Cat\" WHERE \"Cat\".\"id\" = 1;\n{\n  id: 1,\n  firstName: 'Markov',\n  specialSkill: 'sleeping',\n  age: 5,\n  createdAt: 2020-02-11T19:04:23.116Z,\n  updatedAt: 2020-02-11T19:04:23.116Z\n}\n```\n\nFetching a record by primary key is the most common form of read\noperation from a database. In another reading we will learn other ways\nto fetch data. For instance: we will learn how to fetch all cats named\n\"Markov\" (there may be many).\n\n## Updating A Record\n\nLet's tweak our reading code to change (_update_) an attribute of Markov:\n\n```javascript\nconst { sequelize, Cat }  = require(\"./models\");\n\nasync function main() {\n  const cat = await Cat.findByPk(1);\n\n  console.log(\"Old Markov: \");\n  console.log(cat.toJSON());\n\n  // The Cat object is modified, but the corresponding record in the\n  // database is *not* yet changed at all.\n  cat.specialSkill = \"super deep sleeping\";\n  // Only by calling `save` will the data be saved.\n  await cat.save();\n\n  console.log(\"New Markov: \");\n  console.log(cat.toJSON());\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nRunning this code prints:\n\n```\nExecuting (default): SELECT \"id\", \"firstName\", \"specialSkill\", \"age\", \"createdAt\", \"updatedAt\" FROM \"Cats\" AS \"Cat\" WHERE \"Cat\".\"id\" = 1;\nOld Markov:\n{\n  id: 1,\n  firstName: 'Markov',\n  specialSkill: 'sleeping',\n  age: 5,\n  createdAt: 2020-02-11T19:04:23.116Z,\n  updatedAt: 2020-02-11T19:04:23.116Z\n}\nExecuting (default): UPDATE \"Cats\" SET \"specialSkill\"=$1,\"updatedAt\"=$2 WHERE \"id\" = $3\nNew Markov:\n{\n  id: 1,\n  firstName: 'Markov',\n  specialSkill: 'super deep sleeping',\n  age: 5,\n  createdAt: 2020-02-11T19:04:23.116Z,\n  updatedAt: 2020-02-11T19:15:08.668Z\n}\n```\n\n**Important note**: changing an attribute of a `Cat` object does not\nimmediately change any data in the `Cats` table. To change data in the\n`Cats` table, you must also call `save`. If you forget to call `save`,\nno data will be changed. `save` is asynchronous, so you must also\n`await` for it to complete.\n\nIf you look carefully, you can see that the `updatedAt` attribute was\nchanged for us when we updated Markov!\n\n## Destroying A Record\n\nWe can also destroy records and remove them from the database:\n\n```javascript\nconst process = require(\"process\");\n\nconst { sequelize , Cat } = require(\"./models\");\n\nasync function main() {\n  const cat = await Cat.findByPk(1);\n  // Remove the Markov record.\n  await cat.destroy();\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nThis code prints:\n\n```\nExecuting (default): SELECT \"id\", \"firstName\", \"specialSkill\", \"age\", \"createdAt\", \"updatedAt\" FROM \"Cats\" AS \"Cat\" WHERE \"Cat\".\"id\" = 1;\nExecuting (default): DELETE FROM \"Cats\" WHERE \"id\" = 1\n```\n\n## Class Methods For CRUD\n\nWhen creating a record, you can avoid the two step process of (1)\ncreating a `Cat` instance and (2) calling the `save` instance method.\nYou can do a one step process of calling the `create` **class method**:\n\n```javascript\nconst { sequelize, Cat } = require(\"./models\");\n\nasync function main() {\n  const cat = await Cat.create({\n    firstName: \"Curie\",\n    specialSkill: \"jumping\",\n    age: 4,\n  });\n\n  console.log(cat.toJSON());\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nThe `create` class method does both steps in one. It is just a\nconvenience. Similar to before, this code prints:\n\n```\nExecuting (default): INSERT INTO \"Cats\" (\"id\",\"firstName\",\"specialSkill\",\"age\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING *;\n{\n  id: 3,\n  firstName: 'Curie',\n  specialSkill: 'jumping',\n  age: 4,\n  updatedAt: 2020-02-11T19:36:03.858Z,\n  createdAt: 2020-02-11T19:36:03.858Z\n}\n```\n\nWhen destroying, we also did a two step process: (1) fetch the record,\n(2) call the `destroy` instance method. Instead, we could just call the\n`destroy` **class method** directly:\n\n```javascript\nconst { sequelize, Cat } = require(\"./models\");\n\nasync function main() {\n  // Destroy the Cat record with id #3.\n  await Cat.destroy({ where: { id: 3 } });\n\n  await sequelize.close();\n}\n\nmain();\n```\n\nThis prints:\n\n```\nExecuting (default): DELETE FROM \"Cats\" WHERE \"id\" = 3\n```\n\nAn advantage to the class method form of destroying is that we avoid an\nunnecessary fetch of `Cat.findByPk(3)`. Database queries can\nsometimes be slow, though typically a few extra queries won't make a big\ndifference. Choosing between the instance and class methods of\ndestroying usually comes down to which you consider easier to\nread/understand.\n\n## Conclusion\n\nAs ever, the best resource for learning about Sequelize model methods is\nthe [documentation][sequelize-model-documentation]. The documentation\nexplains the `create`, `destroy`, `findByPk`, and `save` methods\nin depth.\n\n[sequelize-model-documentation]: https://sequelize.org/master/class/lib/model.js~Model.html\n\nHaving completed this reading, you now know how to:\n\n* Use Sequelize to create new records in a table (using both instance\n  and class methods),\n* Use Sequelize to read/fetch existing records by primary key,\n* Use Sequelize to update existing records with new attribute values,\n* Use Sequelize to delete records from a table (using both instance and\n  class methods).\n"
  },
  "success": true
}