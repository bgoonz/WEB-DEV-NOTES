{
  "template": {
    "taskId": "fe83fead-db58-4f7e-827a-4ceda3733f0d",
    "name": "Click Events with Targets",
    "repo": "Modular-Curriculum",
    "path": "content/dom/topics/event-handling/readings/reading-5-click-events-with-event-target-js.md",
    "type": "Reading",
    "timeEstimate": 360,
    "urls": [
      "click-events-with-targets"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "# Event Handling: Click Events With Event.target\n\nImagine a user is viewing a Web page showing 300 different products. The user\ncarefully studies the page, makes a selection, and clicks on one of the 300\nproducts. Could we find out through code which element was clicked on? Yes!\n\nPreviously we learned how to handle a click event using an element’s ID.\nHowever, what if we don’t know the ID of the clicked element before it’s\nclicked? There is a simple property we can use to discover on which element the\nclick event occurred: `event.target`.\n\nAccording to the MDN doc on [event.target][1], \"the `target` property of the\n`Event` interface is a reference to the object that dispatched the event. It is\ndifferent from [event.currentTarget][2] when the event handler is called during\nthe bubbling or capturing phase of the event.\" Essentially:\n\n- `event.target` refers to the element on which the event occurred (e.g. a\n  clicked element).\n- `event.currentTarget` refers to the element to which the event handler has\n  been attached, which could be the parent element of the `event.target`\n  element. (_Note: We’ll talk about this in more detail in the reading on The\n  Bubbling Principle._)\n\nIt is common practice for developers to use `event.target` to reference the\nelement on which the event occurs in an event handling function. Let’s practice\nusing this handy property to get the ID of a clicked element.\n\n## Use event.target to console.log the ID of a clicked div\n\nLet’s say we had an HTML page with 10 `divs`, each with a unique ID, like below.\nWe want to click on any one of these divs and print the clicked div’s ID to the\nconsole.\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"example.css\" />\n    <script type=\"text/javascript\" src=\"example.js\"></script>\n  </head>\n  <body>\n    <div id=\"div-1\" class=\"box\">1</div>\n    <div id=\"div-2\" class=\"box\">2</div>\n    <div id=\"div-3\" class=\"box\">3</div>\n    <div id=\"div-4\" class=\"box\">4</div>\n    <div id=\"div-5\" class=\"box\">5</div>\n    <div id=\"div-6\" class=\"box\">6</div>\n    <div id=\"div-7\" class=\"box\">7</div>\n    <div id=\"div-8\" class=\"box\">8</div>\n    <div id=\"div-9\" class=\"box\">9</div>\n    <div id=\"div-10\" class=\"box\">10</div>\n  </body>\n</html>\n```\n\nIn our linked **example.css** file, we’ll add style to the `.box` class to make\nour `divs` easier to click on:\n\n**CSS**\n\n```css\n.box {\n  border: 2px solid gray;\n  height: 50px;\n  width: 50px;\n  margin: 5px;\n}\n```\n\nNow, we’ll write Javascript to print the clicked div’s ID to the console. Again,\nwe want to wait for the necessary DOM elements to load before running our script\nusing `DOMContentLoaded`. Then, we’ll listen for a click event and `console.log`\nthe clicked element’s ID.\n\n**Javascript**\n\n```js\n// example.js\n\n// Wait for the DOM to load\nwindow.addEventListener(\"DOMContentLoaded\", event => {\n  // Add a click event listener on the document’s body\n  document.body.addEventListener(\"click\", event => {\n    // console.log the event target’s ID\n    console.log(event.target.id);\n  });\n});\n```\n\nIf you open up your HTML in a browser, you should see the 10 `divs`. Click on\nany one of them. Open up the browser console by right-clicking, selecting\n_Inspect_, and opening the _Console_ tab. The ID of the div you clicked should\nbe printed to the console. Click on the other divs randomly, and make sure their\nIDs print to the console as well.\n\n## What we learned:\n\n- The definition of `event.target`\n- How `event.target` differs from `event.currentTarget`\n- How to console.log the ID of a clicked element using `event.target`\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/Event/target\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n"
  },
  "success": true
}