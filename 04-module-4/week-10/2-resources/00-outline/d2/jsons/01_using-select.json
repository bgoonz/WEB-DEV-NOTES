{
  "template": {
    "taskId": "86fd632b-e24d-4bec-976d-7a5b1e7abbb6",
    "name": "Using SELECT",
    "repo": "Modular-Curriculum",
    "path": "content/relational-databases/topics/sql/readings/reading-06-select-sql.md",
    "type": "Reading",
    "timeEstimate": 1800,
    "urls": [
      "using-select"
    ],
    "topic": "Homework for Tuesday",
    "subtopic": "Homework",
    "body": "# Retrieving Rows From A Table Using SELECT\n\nIn the first reading, we covered SQL and PostgreSQL and how to set up\nPostgreSQL. In this reading, we're going to learn how to write a simple SQL\nquery using SELECT.\n\n## What is a query?\n\nSQL stands for _Structured Query Language_, and whenever we write\nSQL we're usually querying a database. A query is simply a question we're\nasking a database, and we're aiming to get a response back. The response comes\nback to us as a list of table rows.\n\n## Example table\n\nLet's say we had the following database table called `puppies`. We'll use this\ntable to make our queries:\n\n_**puppies table**_\n\n| name     | age_yrs | breed               | weight_lbs | microchipped |\n|----------|---------|---------------------|------------|--------------|\n| Cooper   | 1       | Miniature Schnauzer | 18         | yes          |\n| Indie    | 0.5     | Yorkshire Terrier   | 13         | yes          |\n| Kota     | 0.7     | Australian Shepherd | 26         | no           |\n| Zoe      | 0.8     | Korean Jindo        | 32         | yes          |\n| Charley  | 1.5     | Basset Hound        | 25         | no           |\n| Ladybird | 0.6     | Labradoodle         | 20         | yes          |\n| Callie   | 0.9     | Corgi               | 16         | no           |\n| Jaxson   | 0.4     | Beagle              | 19         | yes          |\n| Leinni   | 1       | Miniature Schnauzer | 25         | yes          |\n| Max      | 1.6     | German Shepherd     | 65         | no           |\n\n## Using psql in the terminal\n\nAs we covered in the first reading, psql allows us to access the PostgreSQL\nserver and make queries via the terminal. Open up the terminal on your machine,\nand connect to the PostgreSQL server by using the following psql command:\n\n```shell\npsql -U postgres\n```\n\nThe above command lets you access the PostgreSQL server as the user 'postgres'\n(`-U` stands for user). After you enter this command, you'll be prompted for the\npassword that you set for the 'postgres' user during installation. Type it in,\nand hit Enter. Once you've successfully logged in, you should see the following\nin the terminal:\n\n```shell\nPassword for user postgres:\npsql (11.5, server 11.6)\nType \"help\" for help.\n\npostgres=#\n```\n\nYou can exit psql at anytime with the command `\\q`, and you can log back in with\n`psql -U postgres`. (_See this [Postgres Cheatsheet][1] for a list of more PSQL commands._)\n\nWe'll use the following PostgreSQL to create the `puppies` table above. After\nyou've logged into the psql server, type the following code and hit Enter.\n\n_**puppies.sql**_\n```sql\ncreate table puppies (\n  name VARCHAR(100),\n  age_yrs NUMERIC(2,1),\n  breed VARCHAR(100),\n  weight_lbs INT,\n  microchipped BOOLEAN\n);\n\ninsert into puppies\nvalues\n('Cooper', 1, 'Miniature Schnauzer', 18, 'yes');\n\ninsert into puppies\nvalues\n('Indie', 0.5, 'Yorkshire Terrier', 13, 'yes'),\n('Kota', 0.7, 'Australian Shepherd', 26, 'no'),\n('Zoe', 0.8, 'Korean Jindo', 32, 'yes'),\n('Charley', 1.5, 'Basset Hound', 25, 'no'),\n('Ladybird', 0.6, 'Labradoodle', 20, 'yes'),\n('Callie', 0.9, 'Corgi', 16, 'no'),\n('Jaxson', 0.4, 'Beagle', 19, 'yes'),\n('Leinni', 1, 'Miniature Schnauzer', 25, 'yes' ),\n('Max', 1.6, 'German Shepherd', 65, 'no');\n```\n\nIn the above SQL, we created a new table called `puppies`, and we gave it the\nfollowing columns: `name`, `age_yrs`, `breed`, `weight_lbs`, and `microchipped`.\nWe filled the table with ten rows containing data for each puppy, by using\n`insert into puppies values ()`.\n\nWe used the following [PostgreSQL data types][2]: `VARCHAR`, `NUMERIC`, `INT`,\nand `BOOLEAN`.\n\n* `VARCHAR(n)` is a variable-length character string that lets you store up to\n  _n_ characters. Here we've set the character limit to 100 for the `name` and\n  `breed` columns.\n* `NUMERIC(p,s)` is a floating-point number with _p_ digits and _s_ number of\n  places after the decimal point. Here we've set the values for the `age_yrs`\n  column to up to two digits before the decimal and one place after the decimal.\n* `INT` is a 4-byte integer, which we've set on the `weight_lbs` column.\n* `BOOLEAN` is, of course, a Boolean value. We've set the `microchipped` column\n  to accept Boolean values. SQL accepts the standard Boolean values `true`,\n  `false`, or `null`. However, you'll note that we've used `yes` and `no` in our\n  `microchipped` column because [PostgreSQL Booleans][3] can be any of the\n  following values:\n\n| TRUE   | FALSE   |\n|--------|---------|\n| true   | false   |\n| 't'    | 'f'     |\n| 'true' | 'false' |\n| 'yes'  | 'no'    |\n| 'y'    | 'n'     |\n| '1'    | '0'     |\n\n## Simple SELECT Query\n\nWe can write a simple [SELECT query][4] to get results back from the table\nabove. The syntax for the SELECT query is `SELECT [columns] FROM [table]`.\n\n### SELECT all rows\n\nUsing `SELECT *` is a quick way to get back all the rows in a given table. It\nis discouraged in queries that you write for your applications. Use it only when\nplaying around with data, not for production code.\n\n```sql\nSELECT *\nFROM   puppies;\n```\n\nType the query above into your psql terminal, and make sure to add a semicolon\nat the end, which terminates the statement. `SELECT` and `FROM` should be\ncapitalized. The above query should give us back the entire `puppies` table:\n\n| name     | age_yrs | breed               | weight_lbs | microchipped |\n|----------|---------|---------------------|------------|--------------|\n| Cooper   | 1       | Miniature Schnauzer | 18         | yes          |\n| Indie    | 0.5     | Yorkshire Terrier   | 13         | yes          |\n| Kota     | 0.7     | Australian Shepherd | 26         | no           |\n| Zoe      | 0.8     | Korean Jindo        | 32         | yes          |\n| Charley  | 1.5     | Basset Hound        | 25         | no           |\n| Ladybird | 0.6     | Labradoodle         | 20         | yes          |\n| Callie   | 0.9     | Corgi               | 16         | no           |\n| Jaxson   | 0.4     | Beagle              | 19         | yes          |\n| Leinni   | 1       | Miniature Schnauzer | 25         | yes          |\n| Max      | 1.6     | German Shepherd     | 65         | no           |\n\n### SELECT by column\n\nWe can see all the rows in a given column by using `SELECT [column name]`.\n\n```sql\nSELECT name\nFROM   puppies;\n```\n\nType the query above into your psql terminal, and make sure to add a semicolon\nat the end, which terminates the statement. `SELECT` and `FROM` should be\ncapitalized. The above query should give us back the following:\n\n| name     |\n|----------|\n| Cooper   |\n| Indie    |\n| Kota     |\n| Zoe      |\n| Charley  |\n| Ladybird |\n| Callie   |\n| Jaxson   |\n| Leinni   |\n| Max      |\n\n### SELECT multiple columns\n\nTo see multiple columns, we can concatenate the column names by using commas\nbetween column names.\n\n```sql\nSELECT name\n     , age_yrs\n     , weight_lbs\nFROM   puppies;\n```\n\nType the query above into your psql terminal, and make sure to add a semicolon\nat the end, which terminates the statement. `SELECT` and `FROM` should be\ncapitalized. The above query should give us back the following:\n\n| name     | age_yrs | weight_lbs |\n|----------|---------|------------|\n| Cooper   | 1       | 18         |\n| Indie    | 0.5     | 13         |\n| Kota     | 0.7     | 26         |\n| Zoe      | 0.8     | 32         |\n| Charley  | 1.5     | 25         |\n| Ladybird | 0.6     | 20         |\n| Callie   | 0.9     | 16         |\n| Jaxson   | 0.4     | 19         |\n| Leinni   | 1       | 25         |\n| Max      | 1.6     | 65         |\n\n## Formatting SELECT statements\n\nThis is another of those hot-button topics with software developers. Some people\nlike to put all the stuff on one line for each SQL keyword.\n\n```sql\nSELECT name, age_yrs, weight_lbs\nFROM   puppies;\n```\n\nThat works for short lists. But some tables have hundreds of columns. That gets\nlong.\n\nSome developers like what you saw earlier, the \"each column name on its own line\nwith the comma at the front\".\n\n```sql\nSELECT name\n     , age_yrs\n     , weight_lbs\nFROM   puppies;\n```\n\nThey like this because if they need to comment out a column name, they can just\nput a couple of dashes at the beginning of the line.\n\n```sql\nSELECT name\n--     , age_yrs\n     , weight_lbs\nFROM   puppies;\n```\n\nSome developers just do a word wrap when lines get too long.\n\nAll of these are fine. Just stay consistent within a project how you do them.\n\n## What we learned:\n\n* What a query is\n* How to connect to the PostgreSQL server with psql\n* How to construct an example SQL table\n* PostgreSQL data types\n* How to write a simple SELECT query\n* How to SELECT all rows, rows by column, and rows by multiple columns\n\n[1]: https://gist.github.com/Kartones/dd3ff5ec5ea238d4c546\n[2]: http://www.postgresqltutorial.com/postgresql-data-types/\n[3]: http://www.postgresqltutorial.com/postgresql-boolean/\n[4]: https://sqlzoo.net/wiki/SELECT_Reference\n"
  },
  "success": true
}