{
  "template": {
    "taskId": "15db7992-3e41-400a-838d-bf82e7e5b516",
    "name": "Form Validation",
    "repo": "Modular-Curriculum",
    "path": "content/dom/topics/event-handling/readings/reading-3-form-validation-js.md",
    "type": "Reading",
    "timeEstimate": 480,
    "urls": [
      "form-validation"
    ],
    "topic": "Homework for Wednesday",
    "subtopic": "Homework",
    "body": "# Event Handling: Form Validation\n\nEveryone has submitted a form at some point. Form submissions are another common\naction users take on a website. We’ve all seen what happens if we put in values\nthat aren’t accepted on a form -- frustrating errors! Those errors prompt the\nuser to input accepted form values before submission and are the first check to\nensure valid data gets stored in the database.\n\nLearning how to implement front-end validation before a user submits a form is\nan important skill for developers. In this reading, we’ll learn how to check\nwhether two password values on a form are equal and prevent the user from\nsubmitting the form if they’re not.\n\n## Validate passwords before submitting a form\n\nIn order to validate passwords, we need a form with two password fields: a\npassword field and a confirmation field. We’ll also include two other fields\nthat are common on a signup page: a name field and an email field. See the\nexample below:\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"script.js\">\n  </head>\n  <body>\n    <form class=\"form form--signup\" id=\"signup-form\">\n      <input class=\"form__field\" id=\"name\" type=\"text\" placeholder=\"Name\" style=\"display:block\">\n      <input class=\"form__field\" id=\"email\" type=\"text\" placeholder=\"Email\" style=\"display:block\">\n      <input class=\"form__field\" id=\"password\" type=\"text\" placeholder=\"Password\" style=\"display:block\">\n      <input class=\"form__field\" id=\"confirm-password\" type=\"text\" placeholder=\"Password\" style=\"display:block\">\n      <button class=\"form__submit\" id=\"submit\" type=\"submit\">Submit</button>\n    </form>\n  </body>\n</html>\n```\n\nNow, we’ll set up our `script.js` file with code that will:\n\n- Listen for a form submission event\n- Get the values of the two password fields and check for a match\n- Alert the user if there’s not a match, or submit the form\n\n**Javascript**\n\n```js\n// script.js\nwindow.addEventListener(\"DOMContentLoaded\", event => {\n  // get the form element\n  const form = document.getElementById(\"signup-form\");\n\n  const checkPasswordMatch = event => {\n    // get the values of the pw field and pw confirm field\n    const passwordValue = document.getElementById(\"password\").value;\n    const passwordConfirmValue = document.getElementById(\"confirm-password\")\n      .value;\n    // if the values are not equal, alert the user\n    // otherwise, submit the form\n    if (passwordValue !== passwordConfirmValue) {\n      // prevent the default submission behavior\n      event.preventDefault();\n      alert(\"Passwords must match!\");\n    } else {\n      alert(\"The form was submitted!\");\n    }\n  };\n  // listen for submit event and run password check\n  form.addEventListener(\"submit\", checkPasswordMatch);\n});\n```\n\nIn the code above, we prevented the form submission if the passwords don’t match\nusing [Event.preventDefault()][1]. This method stops the default action of an\nevent if the event is not explicitly handled. We then alerted the user that the\nform submission was prevented.\n\n## What we learned:\n\n- Front-end form validation prevents invalid data from being recorded in the\n  database.\n- We use `Event.preventDefault()` to stop form submission.\n- Users are typically notified when default behavior is prevented.\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault\n"
  },
  "success": true
}